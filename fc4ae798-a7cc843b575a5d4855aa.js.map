{"version":3,"sources":["webpack:///./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js"],"names":["BlobClient","_super","urlOrConnectionString","credentialOrPipelineOrContainerName","blobNameOrOptions","options","_a","pipeline","url","_this","this","Error","containerName","blobName","extractedCreds","kind","sharedKeyCredential","accountName","accountKey","encodeURIComponent","proxyOptions","proxyUri","accountSas","call","getBlobAndContainerNamesFromUrl","_name","_containerName","blobContext","storageClientContext","Object","defineProperty","prototype","get","enumerable","configurable","withSnapshot","snapshot","Parameters","SNAPSHOT","length","undefined","withVersion","versionId","VERSIONID","getAppendBlobClient","AppendBlobClient","getBlockBlobClient","BlockBlobClient","getPageBlobClient","PageBlobClient","download","offset","count","_b","span","spanOptions","res_1","wrappedRes","e_1","_c","label","conditions","customerProvidedKey","isHttps","tracingOptions","trys","push","abortSignal","leaseAccessConditions","modifiedAccessConditions","ifTags","tagConditions","onDownloadProgress","onProgress","range","rangeGetContentMD5","rangeGetContentCRC64","rangeGetContentCrc64","cpkInfo","sent","_response","objectReplicationDestinationPolicyId","objectReplicationPolicyId","objectReplicationSourceProperties","objectReplicationRules","maxRetryRequests","contentLength","RangeError","etag","start","updatedOptions","ifMatch","ifModifiedSince","ifNoneMatch","ifUnmodifiedSince","readableStreamBody","setStatus","code","UNKNOWN","message","end","exists","e_2","getProperties","statusCode","NOT_FOUND","res","e_3","delete","e_4","deleteMethod","deleteSnapshots","deleteIfExists","e_5","_d","succeeded","details","errorCode","response","parsedHeaders","undelete","e_6","setHTTPHeaders","blobHTTPHeaders","e_7","setMetadata","metadata","e_8","encryptionScope","setTags","tags","e_9","getTags","e_10","blobTagSet","getBlobLeaseClient","proposeLeaseId","BlobLeaseClient","createSnapshot","e_11","beginCopyFromURL","copySource","client","poller","abortCopyFromURL","args","_i","arguments","apply","startCopyFromURL","blobClient","intervalInMs","resumeFrom","startCopyFromURLOptions","poll","copyId","e_12","syncCopyFromURL","e_13","sourceConditions","copyFromURL","sourceModifiedAccessConditions","sourceIfMatch","sourceIfModifiedSince","sourceIfNoneMatch","sourceIfUnmodifiedSince","sourceContentMD5","blobTagsString","setAccessTier","tier","e_14","setTier","rehydratePriority","downloadToBuffer","param1","param2","param3","param4","buffer","transferProgress_1","batch","_loop_1","off","e_15","Buffer","blockSize","alloc","error","concurrency","addOperation","chunkEnd","stream","maxRetryRequestsPerBlock","loadedBytes","do","downloadToFile","filePath","e_16","blobDownloadStream","parsedUrl","parse","getHost","split","pathComponents","getPath","match","decodeURIComponent","replace","e_17","sourceIfTags","sealBlob","appendBlobContext","create","e_18","createIfNotExists","e_19","ALREADY_EXISTS","seal","e_20","appendPositionAccessConditions","appendBlock","body","e_21","onUploadProgress","transactionalContentMD5","transactionalContentCrc64","appendBlockFromURL","sourceURL","sourceOffset","e_22","appendBlockFromUrl","sourceRange","sourceContentCrc64","blockBlobContext","_blobContext","query","e_23","queryRequest","expression","inputSerialization","inputTextConfiguration","outputSerialization","outputTextConfiguration","onError","upload","e_24","stageBlock","blockId","e_25","stageBlockFromURL","e_26","commitBlockList","blocks","e_27","latest","getBlockList","listType","e_28","committedBlocks","uncommittedBlocks","uploadData","data","buffer_1","browserBlob_1","ArrayBuffer","from","byteOffset","byteLength","uploadSeekableInternal","size","slice","Blob","e","uploadBrowserData","browserData","browserBlob_2","e_29","bodyFactory","numBlocks_1","blockList_1","blockIDPrefix_1","transferProgress_2","_loop_2","i","e_30","maxSingleShotSize","Math","ceil","floor","blockID","uploadFile","e_31","autoClose","Infinity","uploadStream","bufferSize","maxConcurrency","blockNum_1","blockIDPrefix_2","transferProgress_3","blockList_2","e_32","pageBlobContext","e_33","blobSequenceNumber","e_34","uploadPages","e_35","sequenceNumberAccessConditions","uploadPagesFromURL","destOffset","e_36","clearPages","e_37","getPageRanges","e_38","then","getPageRangesDiff","prevSnapshot","e_39","prevsnapshot","getPageRangesDiffForManagedDisks","prevSnapshotUrl","e_40","resize","e_41","updateSequenceNumber","sequenceNumberAction","sequenceNumber","e_42","startCopyIncremental","e_43","copyIncremental","leaseId","clientContext","toServiceClientOptions","_url","ContainerClient","_isContainer","_containerOrBlobOperation","_leaseId","acquireLease","duration","_e","_f","_g","e_44","_h","proposedLeaseId","changeLease","e_45","releaseLease","e_46","renewLease","e_47","breakLease","breakPeriod","operationOptions","e_48","getContainerNameFromUrl","containerContext","e_49","e_50","e_51","getBlobClient","e_52","e_53","e_54","e_55","getAccessPolicy","response_1","identifier","accessPolicy","e_56","blobPublicAccess","date","lastModified","requestId","clientRequestId","signedIdentifiers","version","permissions","expiresOn","Date","startsOn","id","setAccessPolicy","access","containerAcl","acl","e_57","uploadBlockBlob","blockBlobClient","e_58","deleteBlob","e_59","listBlobFlatSegment","marker","e_60","segment","blobItems","map","blobItemInteral","blobTags","objectReplicationMetadata","listBlobHierarchySegment","delimiter","e_61","listSegments","listBlobsFlatSegmentResponse","continuationToken","listItems","e_62_1","e_62","next","done","value","return","listBlobsFlat","include","includeCopy","includeDeleted","includeMetadata","includeSnapshots","includeVersions","includeUncommitedBlobs","includeTags","prefix","iter","Symbol","asyncIterator","byPage","settings","maxPageSize","listHierarchySegments","listBlobsHierarchySegmentResponse","listItemsByHierarchy","blob","e_63_1","e_63","blobPrefixes","listBlobsByHierarchy"],"mappings":"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","file":"fc4ae798-a7cc843b575a5d4855aa.js","sourcesContent":["import { __assign, __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter, __extends, __generator, __values } from \"tslib\";\nimport { generateUuid, getDefaultProxySettings, isNode, isTokenCredential, URLBuilder } from \"@azure/core-http\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { BlobDownloadResponse } from \"./BlobDownloadResponse\";\nimport { BlobQueryResponse } from \"./BlobQueryResponse\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AppendBlob, Blob as StorageBlob, BlockBlob, Container, PageBlob } from \"./generated/src/operations\";\nimport { StorageClientContext } from \"./generated/src/storageClient\";\nimport { ensureCpkIfSpecified, toAccessTier } from \"./models\";\nimport { rangeResponseFromModel } from \"./PageBlobRangeResponse\";\nimport { newPipeline, Pipeline } from \"./Pipeline\";\nimport { BlobBeginCopyFromUrlPoller } from \"./pollers/BlobStartCopyFromUrlPoller\";\nimport { rangeToString } from \"./Range\";\nimport { StorageClient } from \"./StorageClient\";\nimport { Batch } from \"./utils/Batch\";\nimport { BufferScheduler } from \"../../storage-common/src\";\nimport { BLOCK_BLOB_MAX_BLOCKS, BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES, BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES, DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES, DEFAULT_BLOCK_BUFFER_SIZE_BYTES, DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS, ETagAny, ETagNone, URLConstants } from \"./utils/constants\";\nimport { createSpan } from \"./utils/tracing\";\nimport { appendToURLPath, extractConnectionStringParts, generateBlockID, isIpEndpointStyle, parseObjectReplicationRecord, setURLParameter, toBlobTags, toBlobTagsString, toQuerySerialization, toTags, truncatedISO8061Date } from \"./utils/utils.common\";\nimport { fsCreateReadStream, fsStat, readStreamToLocalFile, streamToBuffer } from \"./utils/utils.node\";\n/**\n * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,\n * append blob, or page blob.\n *\n * @export\n * @class BlobClient\n */\n\nvar BlobClient =\n/** @class */\nfunction (_super) {\n  __extends(BlobClient, _super);\n\n  function BlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {\n    var _a;\n\n    var _this = this;\n\n    options = options || {};\n    var pipeline;\n    var url;\n\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      options = blobNameOrOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== \"string\") {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === \"string\" && blobNameOrOptions && typeof blobNameOrOptions === \"string\") {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      var containerName = credentialOrPipelineOrContainerName;\n      var blobName = blobNameOrOptions;\n      var extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n          url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n\n    _this = _super.call(this, url, pipeline) || this;\n    _a = _this.getBlobAndContainerNamesFromUrl(), _this._name = _a.blobName, _this._containerName = _a.containerName;\n    _this.blobContext = new StorageBlob(_this.storageClientContext);\n    return _this;\n  }\n\n  Object.defineProperty(BlobClient.prototype, \"name\", {\n    /**\n     * The name of the blob.\n     */\n    get: function get() {\n      return this._name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BlobClient.prototype, \"containerName\", {\n    /**\n     * The name of the storage container the blob is associated with.\n     */\n    get: function get() {\n      return this._containerName;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {BlobClient} A new BlobClient object identical to the source but with the specified snapshot timestamp\n   * @memberof BlobClient\n   */\n\n  BlobClient.prototype.withSnapshot = function (snapshot) {\n    return new BlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n  };\n  /**\n   * Creates a new BlobClient object pointing to a version of this blob.\n   * Provide \"\" will remove the versionId and return a Client to the base blob.\n   *\n   * @param {string} versionId The versionId.\n   * @returns {BlobClient} A new BlobClient object pointing to the version of this blob.\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.withVersion = function (versionId) {\n    return new BlobClient(setURLParameter(this.url, URLConstants.Parameters.VERSIONID, versionId.length === 0 ? undefined : versionId), this.pipeline);\n  };\n  /**\n   * Creates a AppendBlobClient object.\n   *\n   * @returns {AppendBlobClient}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.getAppendBlobClient = function () {\n    return new AppendBlobClient(this.url, this.pipeline);\n  };\n  /**\n   * Creates a BlockBlobClient object.\n   *\n   * @returns {BlockBlobClient}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.getBlockBlobClient = function () {\n    return new BlockBlobClient(this.url, this.pipeline);\n  };\n  /**\n   * Creates a PageBlobClient object.\n   *\n   * @returns {PageBlobClient}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.getPageBlobClient = function () {\n    return new PageBlobClient(this.url, this.pipeline);\n  };\n  /**\n   * Reads or downloads a blob from the system, including its metadata and properties.\n   * You can also call Get Blob to read a snapshot.\n   *\n   * * In Node.js, data returns in a Readable stream readableStreamBody\n   * * In browsers, data returns in a promise blobBody\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\n   *\n   * @param {number} [offset] From which position of the blob to download, >= 0\n   * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined\n   * @param {BlobDownloadOptions} [options] Optional options to Blob Download operation.\n   * @returns {Promise<BlobDownloadResponseParsed>}\n   * @memberof BlobClient\n   *\n   * Example usage (Node.js):\n   *\n   * ```js\n   * // Download and convert a blob to a string\n   * const downloadBlockBlobResponse = await blobClient.download();\n   * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);\n   * console.log(\"Downloaded blob content:\", downloaded.toString());\n   *\n   * async function streamToBuffer(readableStream) {\n   * return new Promise((resolve, reject) => {\n   * const chunks = [];\n   * readableStream.on(\"data\", (data) => {\n   * chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n   * });\n   * readableStream.on(\"end\", () => {\n   * resolve(Buffer.concat(chunks));\n   * });\n   * readableStream.on(\"error\", reject);\n   * });\n   * }\n   * ```\n   *\n   * Example usage (browser):\n   *\n   * ```js\n   * // Download and convert a blob to a string\n   * const downloadBlockBlobResponse = await blobClient.download();\n   * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);\n   * console.log(\n   *   \"Downloaded blob content\",\n   *   downloaded\n   * );\n   *\n   * async function blobToString(blob: Blob): Promise<string> {\n   *   const fileReader = new FileReader();\n   *   return new Promise<string>((resolve, reject) => {\n   *     fileReader.onloadend = (ev: any) => {\n   *       resolve(ev.target!.result);\n   *     };\n   *     fileReader.onerror = reject;\n   *     fileReader.readAsText(blob);\n   *   });\n   * }\n   * ```\n   */\n\n\n  BlobClient.prototype.download = function (offset, count, options) {\n    var _a;\n\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, res_1, wrappedRes, e_1;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            options.conditions = options.conditions || {};\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            _b = createSpan(\"BlobClient-download\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.download({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              onDownloadProgress: isNode ? undefined : options.onProgress,\n              range: offset === 0 && !count ? undefined : rangeToString({\n                offset: offset,\n                count: count\n              }),\n              rangeGetContentMD5: options.rangeGetContentMD5,\n              rangeGetContentCRC64: options.rangeGetContentCrc64,\n              snapshot: options.snapshot,\n              cpkInfo: options.customerProvidedKey,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            res_1 = _c.sent();\n            wrappedRes = __assign(__assign({}, res_1), {\n              _response: res_1._response,\n              objectReplicationDestinationPolicyId: res_1.objectReplicationPolicyId,\n              objectReplicationSourceProperties: parseObjectReplicationRecord(res_1.objectReplicationRules)\n            }); // Return browser response immediately\n\n            if (!isNode) {\n              return [2\n              /*return*/\n              , wrappedRes];\n            } // We support retrying when download stream unexpected ends in Node.js runtime\n            // Following code shouldn't be bundled into browser build, however some\n            // bundlers may try to bundle following code and \"FileReadResponse.ts\".\n            // In this case, \"FileDownloadResponse.browser.ts\" will be used as a shim of \"FileDownloadResponse.ts\"\n            // The config is in package.json \"browser\" field\n\n\n            if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {\n              // TODO: Default value or make it a required parameter?\n              options.maxRetryRequests = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;\n            }\n\n            if (res_1.contentLength === undefined) {\n              throw new RangeError(\"File download response doesn't contain valid content length header\");\n            }\n\n            if (!res_1.etag) {\n              throw new RangeError(\"File download response doesn't contain valid etag header\");\n            }\n\n            return [2\n            /*return*/\n            , new BlobDownloadResponse(wrappedRes, function (start) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var updatedOptions;\n\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      updatedOptions = {\n                        leaseAccessConditions: options.conditions,\n                        modifiedAccessConditions: {\n                          ifMatch: options.conditions.ifMatch || res_1.etag,\n                          ifModifiedSince: options.conditions.ifModifiedSince,\n                          ifNoneMatch: options.conditions.ifNoneMatch,\n                          ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,\n                          ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n                        },\n                        range: rangeToString({\n                          count: offset + res_1.contentLength - start,\n                          offset: start\n                        }),\n                        rangeGetContentMD5: options.rangeGetContentMD5,\n                        rangeGetContentCRC64: options.rangeGetContentCrc64,\n                        snapshot: options.snapshot,\n                        cpkInfo: options.customerProvidedKey\n                      };\n                      return [4\n                      /*yield*/\n                      , this.blobContext.download(__assign({\n                        abortSignal: options.abortSignal\n                      }, updatedOptions))];\n\n                    case 1:\n                      // Debug purpose only\n                      // console.log(\n                      //   `Read from internal stream, range: ${\n                      //     updatedOptions.range\n                      //   }, options: ${JSON.stringify(updatedOptions)}`\n                      // );\n                      return [2\n                      /*return*/\n                      , _b.sent().readableStreamBody];\n                  }\n                });\n              });\n            }, offset, res_1.contentLength, {\n              abortSignal: options.abortSignal,\n              maxRetryRequests: options.maxRetryRequests,\n              onProgress: options.onProgress\n            })];\n\n          case 3:\n            e_1 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_1.message\n            });\n            throw e_1;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns true if the Azure blob resource represented by this client exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing blob might be deleted by other clients or\n   * applications. Vice versa new blobs might be added by other clients or applications after this\n   * function completes.\n   *\n   * @param {BlobExistsOptions} [options] options to Exists operation.\n   * @returns {Promise<boolean>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.exists = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-exists\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.getProperties({\n              abortSignal: options.abortSignal,\n              customerProvidedKey: options.customerProvidedKey,\n              conditions: options.conditions,\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            })];\n\n          case 2:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 3:\n            e_2 = _b.sent();\n\n            if (e_2.statusCode === 404) {\n              span.setStatus({\n                code: CanonicalCode.NOT_FOUND,\n                message: \"Expected exception when checking blob existence\"\n              });\n              return [2\n              /*return*/\n              , false];\n            }\n\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_2.message\n            });\n            throw e_2;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns all user-defined metadata, standard HTTP properties, and system properties\n   * for the blob. It does not return the content of the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @param {BlobGetPropertiesOptions} [options] Optional options to Get Properties operation.\n   * @returns {Promise<BlobGetPropertiesResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.getProperties = function (options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, res, e_3;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"BlobClient-getProperties\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            options.conditions = options.conditions || {};\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blobContext.getProperties({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              cpkInfo: options.customerProvidedKey,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            res = _c.sent();\n            return [2\n            /*return*/\n            , __assign(__assign({}, res), {\n              _response: res._response,\n              objectReplicationDestinationPolicyId: res.objectReplicationPolicyId,\n              objectReplicationSourceProperties: parseObjectReplicationRecord(res.objectReplicationRules)\n            })];\n\n          case 3:\n            e_3 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_3.message\n            });\n            throw e_3;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Marks the specified blob or snapshot for deletion. The blob is later deleted\n   * during garbage collection. Note that in order to delete a blob, you must delete\n   * all of its snapshots. You can delete both at the same time with the Delete\n   * Blob operation.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n   *\n   * @param {BlobDeleteOptions} [options] Optional options to Blob Delete operation.\n   * @returns {Promise<BlobDeleteResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.delete = function (options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_4;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"BlobClient-delete\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            options.conditions = options.conditions || {};\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.deleteMethod({\n              abortSignal: options.abortSignal,\n              deleteSnapshots: options.deleteSnapshots,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_4 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_4.message\n            });\n            throw e_4;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted\n   * during garbage collection. Note that in order to delete a blob, you must delete\n   * all of its snapshots. You can delete both at the same time with the Delete\n   * Blob operation.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n   *\n   * @param {BlobDeleteOptions} [options] Optional options to Blob Delete operation.\n   * @returns {Promise<BlobDeleteIfExistsResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.deleteIfExists = function (options) {\n    var _a, _b;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _c, span, spanOptions, res, e_5;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _c = createSpan(\"BlobClient-deleteIfExists\", options.tracingOptions), span = _c.span, spanOptions = _c.spanOptions;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.delete(__assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            res = _d.sent();\n            return [2\n            /*return*/\n            , __assign(__assign({\n              succeeded: true\n            }, res), {\n              _response: res._response // _response is made non-enumerable\n\n            })];\n\n          case 3:\n            e_5 = _d.sent();\n\n            if (((_a = e_5.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobNotFound\") {\n              span.setStatus({\n                code: CanonicalCode.NOT_FOUND,\n                message: \"Expected exception when deleting a blob or snapshot only if it exists.\"\n              });\n              return [2\n              /*return*/\n              , __assign(__assign({\n                succeeded: false\n              }, (_b = e_5.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {\n                _response: e_5.response\n              })];\n            }\n\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_5.message\n            });\n            throw e_5;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Restores the contents and metadata of soft deleted blob and any associated\n   * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29\n   * or later.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n   *\n   * @param {BlobUndeleteOptions} [options] Optional options to Blob Undelete operation.\n   * @returns {Promise<BlobUndeleteResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.undelete = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_6;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-undelete\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.undelete({\n              abortSignal: options.abortSignal,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_6 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_6.message\n            });\n            throw e_6;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets system properties on the blob.\n   *\n   * If no value provided, or no value provided for the specified blob HTTP headers,\n   * these blob HTTP headers without a value will be cleared.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param {BlobHTTPHeaders} [blobHTTPHeaders] If no value provided, or no value provided for\n   *                                                   the specified blob HTTP headers, these blob HTTP\n   *                                                   headers without a value will be cleared.\n   * @param {BlobSetHTTPHeadersOptions} [options] Optional options to Blob Set HTTP Headers operation.\n   * @returns {Promise<BlobSetHTTPHeadersResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.setHTTPHeaders = function (blobHTTPHeaders, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_7;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"BlobClient-setHTTPHeaders\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            options.conditions = options.conditions || {};\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blobContext.setHTTPHeaders({\n              abortSignal: options.abortSignal,\n              blobHTTPHeaders: blobHTTPHeaders,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              cpkInfo: options.customerProvidedKey,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_7 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_7.message\n            });\n            throw e_7;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets user-defined metadata for the specified blob as one or more name-value pairs.\n   *\n   * If no option provided, or no metadata defined in the parameter, the blob\n   * metadata will be removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata\n   *\n   * @param {Metadata} [metadata] Replace existing metadata with this value.\n   *                               If no value provided the existing metadata will be removed.\n   * @param {BlobSetMetadataOptions} [options] Optional options to Set Metadata operation.\n   * @returns {Promise<BlobSetMetadataResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.setMetadata = function (metadata, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_8;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"BlobClient-setMetadata\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            options.conditions = options.conditions || {};\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blobContext.setMetadata({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              metadata: metadata,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_8 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_8.message\n            });\n            throw e_8;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets tags on the underlying blob.\n   * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.\n   * Valid tag key and value characters include lower and upper case letters, digits (0-9),\n   * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').\n   *\n   * @param {Tags} tags\n   * @param {BlobSetTagsOptions} [options={}]\n   * @returns {Promise<BlobSetTagsResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.setTags = function (tags, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_9;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"BlobClient-setTags\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.setTags({\n              abortSignal: options.abortSignal,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              spanOptions: spanOptions,\n              tags: toBlobTags(tags)\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_9 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_9.message\n            });\n            throw e_9;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the tags associated with the underlying blob.\n   *\n   * @param {BlobGetTagsOptions} [options={}]\n   * @returns {Promise<BlobGetTagsResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.getTags = function (options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, response, wrappedResponse, e_10;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"BlobClient-getTags\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.getTags({\n              abortSignal: options.abortSignal,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            response = _c.sent();\n            wrappedResponse = __assign(__assign({}, response), {\n              _response: response._response,\n              tags: toTags({\n                blobTagSet: response.blobTagSet\n              }) || {}\n            });\n            return [2\n            /*return*/\n            , wrappedResponse];\n\n          case 3:\n            e_10 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_10.message\n            });\n            throw e_10;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Get a {@link BlobLeaseClient} that manages leases on the blob.\n   *\n   * @param {string} [proposeLeaseId] Initial proposed lease Id.\n   * @returns {BlobLeaseClient} A new BlobLeaseClient object for managing leases on the blob.\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.getBlobLeaseClient = function (proposeLeaseId) {\n    return new BlobLeaseClient(this, proposeLeaseId);\n  };\n  /**\n   * Creates a read-only snapshot of a blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob\n   *\n   * @param {BlobCreateSnapshotOptions} [options] Optional options to the Blob Create Snapshot operation.\n   * @returns {Promise<BlobCreateSnapshotResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.createSnapshot = function (options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_11;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"BlobClient-createSnapshot\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            options.conditions = options.conditions || {};\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blobContext.createSnapshot({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_11 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_11.message\n            });\n            throw e_11;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Asynchronously copies a blob to a destination within the storage account.\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the copy is completed.\n   * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n   * a committed blob in any Azure storage account.\n   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n   * an Azure file in any Azure storage account.\n   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n   * operation to copy from another storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n   *\n   * Example using automatic polling:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url');\n   * const result = await copyPoller.pollUntilDone();\n   * ```\n   *\n   * Example using manual polling:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url');\n   * while (!poller.isDone()) {\n   *    await poller.poll();\n   * }\n   * const result = copyPoller.getResult();\n   * ```\n   *\n   * Example using progress updates:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url', {\n   *   onProgress(state) {\n   *     console.log(`Progress: ${state.copyProgress}`);\n   *   }\n   * });\n   * const result = await copyPoller.pollUntilDone();\n   * ```\n   *\n   * Example using a changing polling interval (default 15 seconds):\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url', {\n   *   intervalInMs: 1000 // poll blob every 1 second for copy progress\n   * });\n   * const result = await copyPoller.pollUntilDone();\n   * ```\n   *\n   * Example using copy cancellation:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url');\n   * // cancel operation after starting it.\n   * try {\n   *   await copyPoller.cancelOperation();\n   *   // calls to get the result now throw PollerCancelledError\n   *   await copyPoller.getResult();\n   * } catch (err) {\n   *   if (err.name === 'PollerCancelledError') {\n   *     console.log('The copy was cancelled.');\n   *   }\n   * }\n   * ```\n   *\n   * @param {string} copySource url to the source Azure Blob/File.\n   * @param {BlobBeginCopyFromURLOptions} [options] Optional options to the Blob Start Copy From URL operation.\n   */\n\n\n  BlobClient.prototype.beginCopyFromURL = function (copySource, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var client, poller;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            client = {\n              abortCopyFromURL: function abortCopyFromURL() {\n                var args = [];\n\n                for (var _i = 0; _i < arguments.length; _i++) {\n                  args[_i] = arguments[_i];\n                }\n\n                return _this.abortCopyFromURL.apply(_this, args);\n              },\n              getProperties: function getProperties() {\n                var args = [];\n\n                for (var _i = 0; _i < arguments.length; _i++) {\n                  args[_i] = arguments[_i];\n                }\n\n                return _this.getProperties.apply(_this, args);\n              },\n              startCopyFromURL: function startCopyFromURL() {\n                var args = [];\n\n                for (var _i = 0; _i < arguments.length; _i++) {\n                  args[_i] = arguments[_i];\n                }\n\n                return _this.startCopyFromURL.apply(_this, args);\n              }\n            };\n            poller = new BlobBeginCopyFromUrlPoller({\n              blobClient: client,\n              copySource: copySource,\n              intervalInMs: options.intervalInMs,\n              onProgress: options.onProgress,\n              resumeFrom: options.resumeFrom,\n              startCopyFromURLOptions: options\n            }); // Trigger the startCopyFromURL call by calling poll.\n            // Any errors from this method should be surfaced to the user.\n\n            return [4\n            /*yield*/\n            , poller.poll()];\n\n          case 1:\n            // Trigger the startCopyFromURL call by calling poll.\n            // Any errors from this method should be surfaced to the user.\n            _a.sent();\n\n            return [2\n            /*return*/\n            , poller];\n        }\n      });\n    });\n  };\n  /**\n   * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero\n   * length and full metadata. Version 2012-02-12 and newer.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob\n   *\n   * @param {string} copyId Id of the Copy From URL operation.\n   * @param {BlobAbortCopyFromURLOptions} [options] Optional options to the Blob Abort Copy From URL operation.\n   * @returns {Promise<BlobAbortCopyFromURLResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.abortCopyFromURL = function (copyId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_12;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-abortCopyFromURL\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.abortCopyFromURL(copyId, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_12 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_12.message\n            });\n            throw e_12;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not\n   * return a response until the copy is complete.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url\n   *\n   * @param {string} copySource The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication\n   * @param {BlobSyncCopyFromURLOptions} [options={}]\n   * @returns {Promise<BlobCopyFromURLResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.syncCopyFromURL = function (copySource, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_13;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"BlobClient-syncCopyFromURL\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.copyFromURL(copySource, {\n              abortSignal: options.abortSignal,\n              metadata: options.metadata,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              sourceModifiedAccessConditions: {\n                sourceIfMatch: options.sourceConditions.ifMatch,\n                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince\n              },\n              sourceContentMD5: options.sourceContentMD5,\n              blobTagsString: toBlobTagsString(options.tags),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_13 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_13.message\n            });\n            throw e_13;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier\n   *\n   * @param {BlockBlobTier | PremiumPageBlobTier | string} tier The tier to be set on the blob. Valid values are Hot, Cool, or Archive.\n   * @param {BlobSetTierOptions} [options] Optional options to the Blob Set Tier operation.\n   * @returns {Promise<BlobsSetTierResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.setAccessTier = function (tier, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_14;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"BlobClient-setAccessTier\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.setTier(toAccessTier(tier), {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              rehydratePriority: options.rehydratePriority,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_14 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_14.message\n            });\n            throw e_14;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  BlobClient.prototype.downloadToBuffer = function (param1, param2, param3, param4) {\n    if (param4 === void 0) {\n      param4 = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var buffer, offset, count, options, _a, span, spanOptions, response, transferProgress_1, batch, _loop_1, off, e_15;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            offset = 0;\n            count = 0;\n            options = param4;\n\n            if (param1 instanceof Buffer) {\n              buffer = param1;\n              offset = param2 || 0;\n              count = typeof param3 === \"number\" ? param3 : 0;\n            } else {\n              offset = typeof param1 === \"number\" ? param1 : 0;\n              count = typeof param2 === \"number\" ? param2 : 0;\n              options = param3 || {};\n            }\n\n            _a = createSpan(\"BlobClient-downloadToBuffer\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 5, 6, 7]);\n\n            if (!options.blockSize) {\n              options.blockSize = 0;\n            }\n\n            if (options.blockSize < 0) {\n              throw new RangeError(\"blockSize option must be >= 0\");\n            }\n\n            if (options.blockSize === 0) {\n              options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n            }\n\n            if (offset < 0) {\n              throw new RangeError(\"offset option must be >= 0\");\n            }\n\n            if (count && count <= 0) {\n              throw new RangeError(\"count option must be > 0\");\n            }\n\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            if (!!count) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.getProperties(__assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            response = _b.sent();\n            count = response.contentLength - offset;\n\n            if (count < 0) {\n              throw new RangeError(\"offset \" + offset + \" shouldn't be larger than blob size \" + response.contentLength);\n            }\n\n            _b.label = 3;\n\n          case 3:\n            // Allocate the buffer of size = count if the buffer is not provided\n            if (!buffer) {\n              try {\n                buffer = Buffer.alloc(count);\n              } catch (error) {\n                throw new Error(\"Unable to allocate the buffer of size: \" + count + \"(in bytes). Please try passing your own buffer to the \\\"downloadToBuffer\\\" method or try using other methods like \\\"download\\\" or \\\"downloadToFile\\\".\\t \" + error.message);\n              }\n            }\n\n            if (buffer.length < count) {\n              throw new RangeError(\"The buffer's size should be equal to or larger than the request count of bytes: \" + count);\n            }\n\n            transferProgress_1 = 0;\n            batch = new Batch(options.concurrency);\n\n            _loop_1 = function _loop_1(off) {\n              batch.addOperation(function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var chunkEnd, response, stream;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        chunkEnd = offset + count;\n\n                        if (off + options.blockSize < chunkEnd) {\n                          chunkEnd = off + options.blockSize;\n                        }\n\n                        return [4\n                        /*yield*/\n                        , this.download(off, chunkEnd - off, {\n                          abortSignal: options.abortSignal,\n                          conditions: options.conditions,\n                          maxRetryRequests: options.maxRetryRequestsPerBlock,\n                          customerProvidedKey: options.customerProvidedKey,\n                          tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                            spanOptions: spanOptions\n                          })\n                        })];\n\n                      case 1:\n                        response = _a.sent();\n                        stream = response.readableStreamBody;\n                        return [4\n                        /*yield*/\n                        , streamToBuffer(stream, buffer, off - offset, chunkEnd - offset)];\n\n                      case 2:\n                        _a.sent(); // Update progress after block is downloaded, in case of block trying\n                        // Could provide finer grained progress updating inside HTTP requests,\n                        // only if convenience layer download try is enabled\n\n\n                        transferProgress_1 += chunkEnd - off;\n\n                        if (options.onProgress) {\n                          options.onProgress({\n                            loadedBytes: transferProgress_1\n                          });\n                        }\n\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              });\n            };\n\n            for (off = offset; off < offset + count; off = off + options.blockSize) {\n              _loop_1(off);\n            }\n\n            return [4\n            /*yield*/\n            , batch.do()];\n\n          case 4:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , buffer];\n\n          case 5:\n            e_15 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_15.message\n            });\n            throw e_15;\n\n          case 6:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Downloads an Azure Blob to a local file.\n   * Fails if the the given file path already exits.\n   * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.\n   *\n   * @param {string} filePath\n   * @param {number} [offset] From which position of the block blob to download.\n   * @param {number} [count] How much data to be downloaded. Will download to the end when passing undefined.\n   * @param {BlobDownloadOptions} [options] Options to Blob download options.\n   * @returns {Promise<BlobDownloadResponseParsed>} The response data for blob download operation,\n   *                                                 but with readableStreamBody set to undefined since its\n   *                                                 content is already read and written into a local file\n   *                                                 at the specified path.\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.downloadToFile = function (filePath, offset, count, options) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, response, e_16;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-downloadToFile\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 5, 6, 7]);\n\n            return [4\n            /*yield*/\n            , this.download(offset, count, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            response = _b.sent();\n            if (!response.readableStreamBody) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , readStreamToLocalFile(response.readableStreamBody, filePath)];\n\n          case 3:\n            _b.sent();\n\n            _b.label = 4;\n\n          case 4:\n            // The stream is no longer accessible so setting it to undefined.\n            response.blobDownloadStream = undefined;\n            return [2\n            /*return*/\n            , response];\n\n          case 5:\n            e_16 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_16.message\n            });\n            throw e_16;\n\n          case 6:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  BlobClient.prototype.getBlobAndContainerNamesFromUrl = function () {\n    var containerName;\n    var blobName;\n\n    try {\n      //  URL may look like the following\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt\";\n      // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`\n      // http://localhost:10001/devstoreaccount1/containername/blob\n      var parsedUrl = URLBuilder.parse(this.url);\n\n      if (parsedUrl.getHost().split(\".\")[1] === \"blob\") {\n        // \"https://myaccount.blob.core.windows.net/containername/blob\".\n        // .getPath() -> /containername/blob\n        var pathComponents = parsedUrl.getPath().match(\"/([^/]*)(/(.*))?\");\n        containerName = pathComponents[1];\n        blobName = pathComponents[3];\n      } else if (isIpEndpointStyle(parsedUrl)) {\n        // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob\n        // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob\n        // .getPath() -> /devstoreaccount1/containername/blob\n        var pathComponents = parsedUrl.getPath().match(\"/([^/]*)/([^/]*)(/(.*))?\");\n        containerName = pathComponents[2];\n        blobName = pathComponents[4];\n      } else {\n        // \"https://customdomain.com/containername/blob\".\n        // .getPath() -> /containername/blob\n        var pathComponents = parsedUrl.getPath().match(\"/([^/]*)(/(.*))?\");\n        containerName = pathComponents[1];\n        blobName = pathComponents[3];\n      } // decode the encoded blobName, containerName - to get all the special characters that might be present in them\n\n\n      containerName = decodeURIComponent(containerName);\n      blobName = decodeURIComponent(blobName); // Azure Storage Server will replace \"\\\" with \"/\" in the blob names\n      //   doing the same in the SDK side so that the user doesn't have to replace \"\\\" instances in the blobName\n\n      blobName = blobName.replace(/\\\\/g, \"/\");\n\n      if (!blobName) {\n        throw new Error(\"Provided blobName is invalid.\");\n      } else if (!containerName) {\n        throw new Error(\"Provided containerName is invalid.\");\n      }\n\n      return {\n        blobName: blobName,\n        containerName: containerName\n      };\n    } catch (error) {\n      throw new Error(\"Unable to extract blobName and containerName with provided information.\");\n    }\n  };\n  /**\n   * Asynchronously copies a blob to a destination within the storage account.\n   * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n   * a committed blob in any Azure storage account.\n   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n   * an Azure file in any Azure storage account.\n   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n   * operation to copy from another storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n   *\n   * @param {string} copySource url to the source Azure Blob/File.\n   * @param {BlobStartCopyFromURLOptions} [options] Optional options to the Blob Start Copy From URL operation.\n   * @returns {Promise<BlobStartCopyFromURLResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.startCopyFromURL = function (copySource, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_17;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"BlobClient-startCopyFromURL\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.startCopyFromURL(copySource, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              sourceModifiedAccessConditions: {\n                sourceIfMatch: options.sourceConditions.ifMatch,\n                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,\n                sourceIfTags: options.sourceConditions.tagConditions\n              },\n              rehydratePriority: options.rehydratePriority,\n              tier: toAccessTier(options.tier),\n              blobTagsString: toBlobTagsString(options.tags),\n              sealBlob: options.sealBlob,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_17 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_17.message\n            });\n            throw e_17;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return BlobClient;\n}(StorageClient);\n\nexport { BlobClient };\n/**\n * AppendBlobClient defines a set of operations applicable to append blobs.\n *\n * @export\n * @class AppendBlobClient\n * @extends {BlobClient}\n */\n\nvar AppendBlobClient =\n/** @class */\nfunction (_super) {\n  __extends(AppendBlobClient, _super);\n\n  function AppendBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {\n    var _this = this; // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n\n\n    var pipeline;\n    var url;\n    options = options || {};\n\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;\n      url = urlOrConnectionString;\n      options = blobNameOrOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== \"string\") {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString; // The second parameter is undefined. Use anonymous credential.\n\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === \"string\" && blobNameOrOptions && typeof blobNameOrOptions === \"string\") {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      var containerName = credentialOrPipelineOrContainerName;\n      var blobName = blobNameOrOptions;\n      var extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n          url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n\n    _this = _super.call(this, url, pipeline) || this;\n    _this.appendBlobContext = new AppendBlob(_this.storageClientContext);\n    return _this;\n  }\n  /**\n   * Creates a new AppendBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {AppendBlobClient} A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.\n   * @memberof AppendBlobClient\n   */\n\n\n  AppendBlobClient.prototype.withSnapshot = function (snapshot) {\n    return new AppendBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n  };\n  /**\n   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {AppendBlobCreateOptions} [options] Options to the Append Block Create operation.\n   * @returns {Promise<AppendBlobCreateResponse>}\n   * @memberof AppendBlobClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const appendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n   * await appendBlobClient.create();\n   * ```\n   */\n\n\n  AppendBlobClient.prototype.create = function (options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_18;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"AppendBlobClient-create\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            options.conditions = options.conditions || {};\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.appendBlobContext.create(0, {\n              abortSignal: options.abortSignal,\n              blobHTTPHeaders: options.blobHTTPHeaders,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              blobTagsString: toBlobTagsString(options.tags),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_18 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_18.message\n            });\n            throw e_18;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n   * If the blob with the same name already exists, the content of the existing blob will remain unchanged.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {AppendBlobCreateIfNotExistsOptions} [options]\n   * @returns {Promise<AppendBlobCreateIfNotExistsResponse>}\n   * @memberof AppendBlobClient\n   */\n\n\n  AppendBlobClient.prototype.createIfNotExists = function (options) {\n    var _a, _b;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _c, span, spanOptions, conditions, res, e_19;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _c = createSpan(\"AppendBlobClient-createIfNotExists\", options.tracingOptions), span = _c.span, spanOptions = _c.spanOptions;\n            conditions = {\n              ifNoneMatch: ETagAny\n            };\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.create(__assign(__assign({}, options), {\n              conditions: conditions,\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            res = _d.sent();\n            return [2\n            /*return*/\n            , __assign(__assign({\n              succeeded: true\n            }, res), {\n              _response: res._response // _response is made non-enumerable\n\n            })];\n\n          case 3:\n            e_19 = _d.sent();\n\n            if (((_a = e_19.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n              span.setStatus({\n                code: CanonicalCode.ALREADY_EXISTS,\n                message: \"Expected exception when creating a blob only if it does not already exist.\"\n              });\n              return [2\n              /*return*/\n              , __assign(__assign({\n                succeeded: false\n              }, (_b = e_19.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {\n                _response: e_19.response\n              })];\n            }\n\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_19.message\n            });\n            throw e_19;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Seals the append blob, making it read only.\n   *\n   * @param {AppendBlobSealOptions} [options={}]\n   * @returns {Promise<AppendBlobAppendBlockResponse>}\n   * @memberof AppendBlobClient\n   */\n\n\n  AppendBlobClient.prototype.seal = function (options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_20;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"AppendBlobClient-seal\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            options.conditions = options.conditions || {};\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.appendBlobContext.seal({\n              abortSignal: options.abortSignal,\n              appendPositionAccessConditions: options.conditions,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_20 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_20.message\n            });\n            throw e_20;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Commits a new block of data to the end of the existing append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/append-block\n   *\n   * @param {HttpRequestBody} body Data to be appended.\n   * @param {number} contentLength Length of the body in bytes.\n   * @param {AppendBlobAppendBlockOptions} [options] Options to the Append Block operation.\n   * @returns {Promise<AppendBlobAppendBlockResponse>}\n   * @memberof AppendBlobClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const content = \"Hello World!\";\n   *\n   * // Create a new append blob and append data to the blob.\n   * const newAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n   * await newAppendBlobClient.create();\n   * await newAppendBlobClient.appendBlock(content, content.length);\n   *\n   * // Append data to an existing append blob.\n   * const existingAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n   * await existingAppendBlobClient.appendBlock(content, content.length);\n   * ```\n   */\n\n\n  AppendBlobClient.prototype.appendBlock = function (body, contentLength, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_21;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"AppendBlobClient-appendBlock\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            options.conditions = options.conditions || {};\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.appendBlobContext.appendBlock(body, contentLength, {\n              abortSignal: options.abortSignal,\n              appendPositionAccessConditions: options.conditions,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              onUploadProgress: options.onProgress,\n              transactionalContentMD5: options.transactionalContentMD5,\n              transactionalContentCrc64: options.transactionalContentCrc64,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_21 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_21.message\n            });\n            throw e_21;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob\n   * where the contents are read from a source url.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url\n   *\n   * @param {string} sourceURL\n   *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can\n   *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n   *                 must either be public or must be authenticated via a shared access signature. If the source blob is\n   *                 public, no authentication is required to perform the operation.\n   * @param {number} sourceOffset Offset in source to be appended\n   * @param {number} count Number of bytes to be appended as a block\n   * @param {AppendBlobAppendBlockFromURLOptions} [options={}]\n   * @returns {Promise<AppendBlobAppendBlockFromUrlResponse>}\n   * @memberof AppendBlobClient\n   */\n\n\n  AppendBlobClient.prototype.appendBlockFromURL = function (sourceURL, sourceOffset, count, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_22;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"AppendBlobClient-appendBlockFromURL\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {\n              abortSignal: options.abortSignal,\n              sourceRange: rangeToString({\n                offset: sourceOffset,\n                count: count\n              }),\n              sourceContentMD5: options.sourceContentMD5,\n              sourceContentCrc64: options.sourceContentCrc64,\n              leaseAccessConditions: options.conditions,\n              appendPositionAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              sourceModifiedAccessConditions: {\n                sourceIfMatch: options.sourceConditions.ifMatch,\n                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince\n              },\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_22 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_22.message\n            });\n            throw e_22;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return AppendBlobClient;\n}(BlobClient);\n\nexport { AppendBlobClient };\n/**\n * BlockBlobClient defines a set of operations applicable to block blobs.\n *\n * @export\n * @class BlockBlobClient\n * @extends {BlobClient}\n */\n\nvar BlockBlobClient =\n/** @class */\nfunction (_super) {\n  __extends(BlockBlobClient, _super);\n\n  function BlockBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {\n    var _this = this; // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n\n\n    var pipeline;\n    var url;\n    options = options || {};\n\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      options = blobNameOrOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== \"string\") {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === \"string\" && blobNameOrOptions && typeof blobNameOrOptions === \"string\") {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      var containerName = credentialOrPipelineOrContainerName;\n      var blobName = blobNameOrOptions;\n      var extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n          url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n\n    _this = _super.call(this, url, pipeline) || this;\n    _this.blockBlobContext = new BlockBlob(_this.storageClientContext);\n    _this._blobContext = new StorageBlob(_this.storageClientContext);\n    return _this;\n  }\n  /**\n   * Creates a new BlockBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {BlockBlobClient} A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.withSnapshot = function (snapshot) {\n    return new BlockBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n  };\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Quick query for a JSON or CSV formatted blob.\n   *\n   * Example usage (Node.js):\n   *\n   * ```js\n   * // Query and convert a blob to a string\n   * const queryBlockBlobResponse = await blockBlobClient.query(\"select * from BlobStorage\");\n   * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();\n   * console.log(\"Query blob content:\", downloaded);\n   *\n   * async function streamToBuffer(readableStream) {\n   *   return new Promise((resolve, reject) => {\n   *     const chunks = [];\n   *     readableStream.on(\"data\", (data) => {\n   *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n   *     });\n   *     readableStream.on(\"end\", () => {\n   *       resolve(Buffer.concat(chunks));\n   *     });\n   *     readableStream.on(\"error\", reject);\n   *   });\n   * }\n   * ```\n   *\n   * @param {string} query\n   * @param {BlockBlobQueryOptions} [options={}]\n   * @returns {Promise<BlobDownloadResponseModel>}\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.query = function (query, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, response, e_23;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            _b = createSpan(\"BlockBlobClient-query\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            if (!isNode) {\n              throw new Error(\"This operation currently is only supported in Node.js.\");\n            }\n\n            return [4\n            /*yield*/\n            , this._blobContext.query({\n              abortSignal: options.abortSignal,\n              queryRequest: {\n                expression: query,\n                inputSerialization: toQuerySerialization(options.inputTextConfiguration),\n                outputSerialization: toQuerySerialization(options.outputTextConfiguration)\n              },\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            response = _c.sent();\n            return [2\n            /*return*/\n            , new BlobQueryResponse(response, {\n              abortSignal: options.abortSignal,\n              onProgress: options.onProgress,\n              onError: options.onError\n            })];\n\n          case 3:\n            e_23 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_23.message\n            });\n            throw e_23;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new block blob, or updates the content of an existing block blob.\n   * Updating an existing block blob overwrites any existing metadata on the blob.\n   * Partial updates are not supported; the content of the existing blob is\n   * overwritten with the new content. To perform a partial update of a block blob's,\n   * use {@link stageBlock} and {@link commitBlockList}.\n   *\n   * This is a non-parallel uploading method, please use {@link uploadFile},\n   * {@link uploadStream} or {@link uploadBrowserData} for better performance\n   * with concurrency uploading.\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {HttpRequestBody} body Blob, string, ArrayBuffer, ArrayBufferView or a function\n   *                               which returns a new Readable stream whose offset is from data source beginning.\n   * @param {number} contentLength Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n   *                               string including non non-Base64/Hex-encoded characters.\n   * @param {BlockBlobUploadOptions} [options] Options to the Block Blob Upload operation.\n   * @returns {Promise<BlockBlobUploadResponse>} Response data for the Block Blob Upload operation.\n   * @memberof BlockBlobClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const content = \"Hello world!\";\n   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n   * ```\n   */\n\n\n  BlockBlobClient.prototype.upload = function (body, contentLength, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_24;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _b = createSpan(\"BlockBlobClient-upload\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blockBlobContext.upload(body, contentLength, {\n              abortSignal: options.abortSignal,\n              blobHTTPHeaders: options.blobHTTPHeaders,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              onUploadProgress: options.onProgress,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              tier: toAccessTier(options.tier),\n              blobTagsString: toBlobTagsString(options.tags),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_24 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_24.message\n            });\n            throw e_24;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Uploads the specified block to the block blob's \"staging area\" to be later\n   * committed by a call to commitBlockList.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-block\n   *\n   * @param {string} blockId A 64-byte value that is base64-encoded\n   * @param {HttpRequestBody} body Data to upload to the staging area.\n   * @param {number} contentLength Number of bytes to upload.\n   * @param {BlockBlobStageBlockOptions} [options] Options to the Block Blob Stage Block operation.\n   * @returns {Promise<BlockBlobStageBlockResponse>} Response data for the Block Blob Stage Block operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.stageBlock = function (blockId, body, contentLength, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_25;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlockBlobClient-stageBlock\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blockBlobContext.stageBlock(blockId, contentLength, body, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              onUploadProgress: options.onProgress,\n              transactionalContentMD5: options.transactionalContentMD5,\n              transactionalContentCrc64: options.transactionalContentCrc64,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_25 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_25.message\n            });\n            throw e_25;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * The Stage Block From URL operation creates a new block to be committed as part\n   * of a blob where the contents are read from a URL.\n   * This API is available starting in version 2018-03-28.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url\n   *\n   * @param {string} blockId A 64-byte value that is base64-encoded\n   * @param {string} sourceURL Specifies the URL of the blob. The value\n   *                           may be a URL of up to 2 KB in length that specifies a blob.\n   *                           The value should be URL-encoded as it would appear\n   *                           in a request URI. The source blob must either be public\n   *                           or must be authenticated via a shared access signature.\n   *                           If the source blob is public, no authentication is required\n   *                           to perform the operation. Here are some examples of source object URLs:\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param {number} [offset] From which position of the blob to download, >= 0\n   * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined\n   * @param {BlockBlobStageBlockFromURLOptions} [options={}] Options to the Block Blob Stage Block From URL operation.\n   * @returns {Promise<BlockBlobStageBlockFromURLResponse>} Response data for the Block Blob Stage Block From URL operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.stageBlockFromURL = function (blockId, sourceURL, offset, count, options) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_26;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlockBlobClient-stageBlockFromURL\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              sourceContentMD5: options.sourceContentMD5,\n              sourceContentCrc64: options.sourceContentCrc64,\n              sourceRange: offset === 0 && !count ? undefined : rangeToString({\n                offset: offset,\n                count: count\n              }),\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_26 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_26.message\n            });\n            throw e_26;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Writes a blob by specifying the list of block IDs that make up the blob.\n   * In order to be written as part of a blob, a block must have been successfully written\n   * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to\n   * update a blob by uploading only those blocks that have changed, then committing the new and existing\n   * blocks together. Any blocks not specified in the block list and permanently deleted.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list\n   *\n   * @param {string[]} blocks  Array of 64-byte value that is base64-encoded\n   * @param {BlockBlobCommitBlockListOptions} [options] Options to the Block Blob Commit Block List operation.\n   * @returns {Promise<BlockBlobCommitBlockListResponse>} Response data for the Block Blob Commit Block List operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.commitBlockList = function (blocks, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_27;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _b = createSpan(\"BlockBlobClient-commitBlockList\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blockBlobContext.commitBlockList({\n              latest: blocks\n            }, {\n              abortSignal: options.abortSignal,\n              blobHTTPHeaders: options.blobHTTPHeaders,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              tier: toAccessTier(options.tier),\n              blobTagsString: toBlobTagsString(options.tags),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_27 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_27.message\n            });\n            throw e_27;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the list of blocks that have been uploaded as part of a block blob\n   * using the specified block list filter.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list\n   *\n   * @param {BlockListType} listType Specifies whether to return the list of committed blocks,\n   *                                        the list of uncommitted blocks, or both lists together.\n   * @param {BlockBlobGetBlockListOptions} [options] Options to the Block Blob Get Block List operation.\n   * @returns {Promise<BlockBlobGetBlockListResponse>} Response data for the Block Blob Get Block List operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.getBlockList = function (listType, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, res, e_28;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"BlockBlobClient-getBlockList\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blockBlobContext.getBlockList(listType, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            res = _c.sent();\n\n            if (!res.committedBlocks) {\n              res.committedBlocks = [];\n            }\n\n            if (!res.uncommittedBlocks) {\n              res.uncommittedBlocks = [];\n            }\n\n            return [2\n            /*return*/\n            , res];\n\n          case 3:\n            e_28 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_28.message\n            });\n            throw e_28;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // High level functions\n\n  /**\n   * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.\n   *\n   * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n   * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n   * to commit the block list.\n   *\n   * @export\n   * @param {Buffer | Blob | ArrayBuffer | ArrayBufferView} data Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView\n   * @param {BlockBlobParallelUploadOptions} [options]\n   * @returns {Promise<BlobUploadCommonResponse>}\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.uploadData = function (data, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, buffer_1, browserBlob_1;\n\n      return __generator(this, function (_b) {\n        _a = createSpan(\"BlockBlobClient-uploadData\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n\n        try {\n          if (isNode) {\n            if (data instanceof Buffer) {\n              buffer_1 = data;\n            } else if (data instanceof ArrayBuffer) {\n              buffer_1 = Buffer.from(data);\n            } else {\n              data = data;\n              buffer_1 = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n            }\n\n            return [2\n            /*return*/\n            , this.uploadSeekableInternal(function (offset, size) {\n              return buffer_1.slice(offset, offset + size);\n            }, buffer_1.byteLength, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n          } else {\n            browserBlob_1 = new Blob([data]);\n            return [2\n            /*return*/\n            , this.uploadSeekableInternal(function (offset, size) {\n              return browserBlob_1.slice(offset, offset + size);\n            }, browserBlob_1.size, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n          }\n        } catch (e) {\n          span.setStatus({\n            code: CanonicalCode.UNKNOWN,\n            message: e.message\n          });\n          throw e;\n        } finally {\n          span.end();\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * ONLY AVAILABLE IN BROWSERS.\n   *\n   * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.\n   *\n   * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call\n   * {@link commitBlockList} to commit the block list.\n   *\n   * @deprecated Use {@link uploadData} instead.\n   *\n   * @export\n   * @param {Blob | ArrayBuffer | ArrayBufferView} browserData Blob, File, ArrayBuffer or ArrayBufferView\n   * @param {BlockBlobParallelUploadOptions} [options] Options to upload browser data.\n   * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.uploadBrowserData = function (browserData, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, browserBlob_2, e_29;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlockBlobClient-uploadBrowserData\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            browserBlob_2 = new Blob([browserData]);\n            return [4\n            /*yield*/\n            , this.uploadSeekableInternal(function (offset, size) {\n              return browserBlob_2.slice(offset, offset + size);\n            }, browserBlob_2.size, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_29 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_29.message\n            });\n            throw e_29;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   *\n   * Uploads data to block blob. Requires a bodyFactory as the data source,\n   * which need to return a {@link HttpRequestBody} object with the offset and size provided.\n   *\n   * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n   * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n   * to commit the block list.\n   *\n   * @param {(offset: number, size: number) => HttpRequestBody} bodyFactory\n   * @param {number} size size of the data to upload.\n   * @param {BlockBlobParallelUploadOptions} [options] Options to Upload to Block Blob operation.\n   * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.uploadSeekableInternal = function (bodyFactory, size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, numBlocks_1, blockList_1, blockIDPrefix_1, transferProgress_2, batch, _loop_2, i, e_30;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.blockSize) {\n              options.blockSize = 0;\n            }\n\n            if (options.blockSize < 0 || options.blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n              throw new RangeError(\"blockSize option must be >= 0 and <= \" + BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES);\n            }\n\n            if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {\n              options.maxSingleShotSize = BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n            }\n\n            if (options.maxSingleShotSize < 0 || options.maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {\n              throw new RangeError(\"maxSingleShotSize option must be >= 0 and <= \" + BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES);\n            }\n\n            if (options.blockSize === 0) {\n              if (size > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(size + \" is too larger to upload to a block blob.\");\n              }\n\n              if (size > options.maxSingleShotSize) {\n                options.blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);\n\n                if (options.blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n                  options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n                }\n              }\n            }\n\n            if (!options.blobHTTPHeaders) {\n              options.blobHTTPHeaders = {};\n            }\n\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            _a = createSpan(\"BlockBlobClient-uploadSeekableInternal\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 5, 6, 7]);\n\n            if (!(size <= options.maxSingleShotSize)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.upload(bodyFactory(0, size), size, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            numBlocks_1 = Math.floor((size - 1) / options.blockSize) + 1;\n\n            if (numBlocks_1 > BLOCK_BLOB_MAX_BLOCKS) {\n              throw new RangeError(\"The buffer's size is too big or the BlockSize is too small;\" + (\"the number of blocks must be <= \" + BLOCK_BLOB_MAX_BLOCKS));\n            }\n\n            blockList_1 = [];\n            blockIDPrefix_1 = generateUuid();\n            transferProgress_2 = 0;\n            batch = new Batch(options.concurrency);\n\n            _loop_2 = function _loop_2(i) {\n              batch.addOperation(function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var blockID, start, end, contentLength;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        blockID = generateBlockID(blockIDPrefix_1, i);\n                        start = options.blockSize * i;\n                        end = i === numBlocks_1 - 1 ? size : start + options.blockSize;\n                        contentLength = end - start;\n                        blockList_1.push(blockID);\n                        return [4\n                        /*yield*/\n                        , this.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {\n                          abortSignal: options.abortSignal,\n                          conditions: options.conditions,\n                          encryptionScope: options.encryptionScope,\n                          tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                            spanOptions: spanOptions\n                          })\n                        })];\n\n                      case 1:\n                        _a.sent(); // Update progress after block is successfully uploaded to server, in case of block trying\n                        // TODO: Hook with convenience layer progress event in finer level\n\n\n                        transferProgress_2 += contentLength;\n\n                        if (options.onProgress) {\n                          options.onProgress({\n                            loadedBytes: transferProgress_2\n                          });\n                        }\n\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              });\n            };\n\n            for (i = 0; i < numBlocks_1; i++) {\n              _loop_2(i);\n            }\n\n            return [4\n            /*yield*/\n            , batch.do()];\n\n          case 4:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , this.commitBlockList(blockList_1, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 5:\n            e_30 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_30.message\n            });\n            throw e_30;\n\n          case 6:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a local file in blocks to a block blob.\n   *\n   * When file size <= 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n   * to commit the block list.\n   *\n   * @param {string} filePath Full path of local file\n   * @param {BlockBlobParallelUploadOptions} [options] Options to Upload to Block Blob operation.\n   * @returns {(Promise<BlobUploadCommonResponse>)}  Response data for the Blob Upload operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.uploadFile = function (filePath, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, size, e_31;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlockBlobClient-uploadFile\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 4, 5, 6]);\n\n            return [4\n            /*yield*/\n            , fsStat(filePath)];\n\n          case 2:\n            size = _b.sent().size;\n            return [4\n            /*yield*/\n            , this.uploadSeekableInternal(function (offset, count) {\n              return function () {\n                return fsCreateReadStream(filePath, {\n                  autoClose: true,\n                  end: count ? offset + count - 1 : Infinity,\n                  start: offset\n                });\n              };\n            }, size, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 3:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 4:\n            e_31 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_31.message\n            });\n            throw e_31;\n\n          case 5:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a Node.js Readable stream into block blob.\n   *\n   * PERFORMANCE IMPROVEMENT TIPS:\n   * * Input stream highWaterMark is better to set a same value with bufferSize\n   *    parameter, which will avoid Buffer.concat() operations.\n   *\n   * @param {Readable} stream Node.js Readable stream\n   * @param {number} bufferSize Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB\n   * @param {number} maxConcurrency  Max concurrency indicates the max number of buffers that can be allocated,\n   *                                 positive correlation with max uploading concurrency. Default value is 5\n   * @param {BlockBlobUploadStreamOptions} [options] Options to Upload Stream to Block Blob operation.\n   * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.uploadStream = function (stream, bufferSize, maxConcurrency, options) {\n    if (bufferSize === void 0) {\n      bufferSize = DEFAULT_BLOCK_BUFFER_SIZE_BYTES;\n    }\n\n    if (maxConcurrency === void 0) {\n      maxConcurrency = 5;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, blockNum_1, blockIDPrefix_2, transferProgress_3, blockList_2, scheduler, e_32;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.blobHTTPHeaders) {\n              options.blobHTTPHeaders = {};\n            }\n\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            _a = createSpan(\"BlockBlobClient-uploadStream\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 4, 5, 6]);\n\n            blockNum_1 = 0;\n            blockIDPrefix_2 = generateUuid();\n            transferProgress_3 = 0;\n            blockList_2 = [];\n            scheduler = new BufferScheduler(stream, bufferSize, maxConcurrency, function (body, length) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var blockID;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      blockID = generateBlockID(blockIDPrefix_2, blockNum_1);\n                      blockList_2.push(blockID);\n                      blockNum_1++;\n                      return [4\n                      /*yield*/\n                      , this.stageBlock(blockID, body, length, {\n                        conditions: options.conditions,\n                        encryptionScope: options.encryptionScope,\n                        tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                          spanOptions: spanOptions\n                        })\n                      })];\n\n                    case 1:\n                      _a.sent(); // Update progress after block is successfully uploaded to server, in case of block trying\n\n\n                      transferProgress_3 += length;\n\n                      if (options.onProgress) {\n                        options.onProgress({\n                          loadedBytes: transferProgress_3\n                        });\n                      }\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, // concurrency should set a smaller value than maxConcurrency, which is helpful to\n            // reduce the possibility when a outgoing handler waits for stream data, in\n            // this situation, outgoing handlers are blocked.\n            // Outgoing queue shouldn't be empty.\n            Math.ceil(maxConcurrency / 4 * 3));\n            return [4\n            /*yield*/\n            , scheduler.do()];\n\n          case 2:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.commitBlockList(blockList_2, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 3:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 4:\n            e_32 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_32.message\n            });\n            throw e_32;\n\n          case 5:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return BlockBlobClient;\n}(BlobClient);\n\nexport { BlockBlobClient };\n/**\n * PageBlobClient defines a set of operations applicable to page blobs.\n *\n * @export\n * @class PageBlobClient\n * @extends {BlobClient}\n */\n\nvar PageBlobClient =\n/** @class */\nfunction (_super) {\n  __extends(PageBlobClient, _super);\n\n  function PageBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {\n    var _this = this; // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n\n\n    var pipeline;\n    var url;\n    options = options || {};\n\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      options = blobNameOrOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== \"string\") {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === \"string\" && blobNameOrOptions && typeof blobNameOrOptions === \"string\") {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      var containerName = credentialOrPipelineOrContainerName;\n      var blobName = blobNameOrOptions;\n      var extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n          url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n\n    _this = _super.call(this, url, pipeline) || this;\n    _this.pageBlobContext = new PageBlob(_this.storageClientContext);\n    return _this;\n  }\n  /**\n   * Creates a new PageBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {PageBlobClient} A new PageBlobClient object identical to the source but with the specified snapshot timestamp.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.withSnapshot = function (snapshot) {\n    return new PageBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n  };\n  /**\n   * Creates a page blob of the specified length. Call uploadPages to upload data\n   * data to a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {number} size size of the page blob.\n   * @param {PageBlobCreateOptions} [options] Options to the Page Blob Create operation.\n   * @returns {Promise<PageBlobCreateResponse>} Response data for the Page Blob Create operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.create = function (size, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_33;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _b = createSpan(\"PageBlobClient-create\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.pageBlobContext.create(0, size, {\n              abortSignal: options.abortSignal,\n              blobHTTPHeaders: options.blobHTTPHeaders,\n              blobSequenceNumber: options.blobSequenceNumber,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              tier: toAccessTier(options.tier),\n              blobTagsString: toBlobTagsString(options.tags),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_33 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_33.message\n            });\n            throw e_33;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a page blob of the specified length. Call uploadPages to upload data\n   * data to a page blob. If the blob with the same name already exists, the content\n   * of the existing blob will remain unchanged.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {number} size size of the page blob.\n   * @param {PageBlobCreateIfNotExistsOptions} [options]\n   * @returns {Promise<PageBlobCreateIfNotExistsResponse>}\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.createIfNotExists = function (size, options) {\n    var _a, _b;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _c, span, spanOptions, conditions, res, e_34;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _c = createSpan(\"PageBlobClient-createIfNotExists\", options.tracingOptions), span = _c.span, spanOptions = _c.spanOptions;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 3, 4, 5]);\n\n            conditions = {\n              ifNoneMatch: ETagAny\n            };\n            return [4\n            /*yield*/\n            , this.create(size, __assign(__assign({}, options), {\n              conditions: conditions,\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            res = _d.sent();\n            return [2\n            /*return*/\n            , __assign(__assign({\n              succeeded: true\n            }, res), {\n              _response: res._response // _response is made non-enumerable\n\n            })];\n\n          case 3:\n            e_34 = _d.sent();\n\n            if (((_a = e_34.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n              span.setStatus({\n                code: CanonicalCode.ALREADY_EXISTS,\n                message: \"Expected exception when creating a blob only if it does not already exist.\"\n              });\n              return [2\n              /*return*/\n              , __assign(__assign({\n                succeeded: false\n              }, (_b = e_34.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {\n                _response: e_34.response\n              })];\n            }\n\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_34.message\n            });\n            throw e_34;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param {HttpRequestBody} body Data to upload\n   * @param {number} offset Offset of destination page blob\n   * @param {number} count Content length of the body, also number of bytes to be uploaded\n   * @param {PageBlobUploadPagesOptions} [options] Options to the Page Blob Upload Pages operation.\n   * @returns {Promise<PageBlobsUploadPagesResponse>} Response data for the Page Blob Upload Pages operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.uploadPages = function (body, offset, count, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_35;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _b = createSpan(\"PageBlobClient-uploadPages\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.pageBlobContext.uploadPages(body, count, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              onUploadProgress: options.onProgress,\n              range: rangeToString({\n                offset: offset,\n                count: count\n              }),\n              sequenceNumberAccessConditions: options.conditions,\n              transactionalContentMD5: options.transactionalContentMD5,\n              transactionalContentCrc64: options.transactionalContentCrc64,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_35 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_35.message\n            });\n            throw e_35;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob where the\n   * contents are read from a URL.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url\n   *\n   * @param {string} sourceURL Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication\n   * @param {number} sourceOffset The source offset to copy from. Pass 0 to copy from the beginning of source page blob\n   * @param {number} destOffset Offset of destination page blob\n   * @param {number} count Number of bytes to be uploaded from source page blob\n   * @param {PageBlobUploadPagesFromURLOptions} [options={}]\n   * @returns {Promise<PageBlobUploadPagesFromURLResponse>}\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.uploadPagesFromURL = function (sourceURL, sourceOffset, destOffset, count, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_36;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            _b = createSpan(\"PageBlobClient-uploadPagesFromURL\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.pageBlobContext.uploadPagesFromURL(sourceURL, rangeToString({\n              offset: sourceOffset,\n              count: count\n            }), 0, rangeToString({\n              offset: destOffset,\n              count: count\n            }), {\n              abortSignal: options.abortSignal,\n              sourceContentMD5: options.sourceContentMD5,\n              sourceContentCrc64: options.sourceContentCrc64,\n              leaseAccessConditions: options.conditions,\n              sequenceNumberAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              sourceModifiedAccessConditions: {\n                sourceIfMatch: options.sourceConditions.ifMatch,\n                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince\n              },\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_36 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_36.message\n            });\n            throw e_36;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Frees the specified pages from the page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param {number} [offset] Starting byte position of the pages to clear.\n   * @param {number} [count] Number of bytes to clear.\n   * @param {PageBlobClearPagesOptions} [options] Options to the Page Blob Clear Pages operation.\n   * @returns {Promise<PageBlobClearPagesResponse>} Response data for the Page Blob Clear Pages operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.clearPages = function (offset, count, options) {\n    var _a;\n\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_37;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _b = createSpan(\"PageBlobClient-clearPages\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.clearPages(0, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              range: rangeToString({\n                offset: offset,\n                count: count\n              }),\n              sequenceNumberAccessConditions: options.conditions,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_37 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_37.message\n            });\n            throw e_37;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the list of valid page ranges for a page blob or snapshot of a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {number} [offset] Starting byte position of the page ranges.\n   * @param {number} [count] Number of bytes to get.\n   * @param {PageBlobGetPageRangesOptions} [options] Options to the Page Blob Get Ranges operation.\n   * @returns {Promise<PageBlobGetPageRangesResponse>} Response data for the Page Blob Get Ranges operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.getPageRanges = function (offset, count, options) {\n    var _a;\n\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_38;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _b = createSpan(\"PageBlobClient-getPageRanges\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.getPageRanges({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              range: rangeToString({\n                offset: offset,\n                count: count\n              }),\n              spanOptions: spanOptions\n            }).then(rangeResponseFromModel)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_38 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_38.message\n            });\n            throw e_38;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the collection of page ranges that differ between a specified snapshot and this page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {number} offset Starting byte position of the page blob\n   * @param {number} count Number of bytes to get ranges diff.\n   * @param {string} prevSnapshot Timestamp of snapshot to retrieve the difference.\n   * @param {PageBlobGetPageRangesDiffOptions} [options] Options to the Page Blob Get Page Ranges Diff operation.\n   * @returns {Promise<PageBlobGetPageRangesDiffResponse>} Response data for the Page Blob Get Page Range Diff operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.getPageRangesDiff = function (offset, count, prevSnapshot, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_39;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _b = createSpan(\"PageBlobClient-getPageRangesDiff\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.getPageRangesDiff({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              prevsnapshot: prevSnapshot,\n              range: rangeToString({\n                offset: offset,\n                count: count\n              }),\n              spanOptions: spanOptions\n            }).then(rangeResponseFromModel)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_39 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_39.message\n            });\n            throw e_39;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {number} offset Starting byte position of the page blob\n   * @param {number} count Number of bytes to get ranges diff.\n   * @param {string} prevSnapshotUrl URL of snapshot to retrieve the difference.\n   * @param {PageBlobGetPageRangesDiffOptions} [options] Options to the Page Blob Get Page Ranges Diff operation.\n   * @returns {Promise<PageBlobGetPageRangesDiffResponse>} Response data for the Page Blob Get Page Range Diff operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.getPageRangesDiffForManagedDisks = function (offset, count, prevSnapshotUrl, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_40;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _b = createSpan(\"PageBlobClient-GetPageRangesDiffForManagedDisks\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.getPageRangesDiff({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              prevSnapshotUrl: prevSnapshotUrl,\n              range: rangeToString({\n                offset: offset,\n                count: count\n              }),\n              spanOptions: spanOptions\n            }).then(rangeResponseFromModel)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_40 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_40.message\n            });\n            throw e_40;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Resizes the page blob to the specified size (which must be a multiple of 512).\n   * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties\n   *\n   * @param {number} size Target size\n   * @param {PageBlobResizeOptions} [options] Options to the Page Blob Resize operation.\n   * @returns {Promise<PageBlobResizeResponse>} Response data for the Page Blob Resize operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.resize = function (size, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_41;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _b = createSpan(\"PageBlobClient-resize\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.resize(size, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_41 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_41.message\n            });\n            throw e_41;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets a page blob's sequence number.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param {SequenceNumberActionType} sequenceNumberAction Indicates how the service should modify the blob's sequence number.\n   * @param {number} [sequenceNumber] Required if sequenceNumberAction is max or update\n   * @param {PageBlobUpdateSequenceNumberOptions} [options] Options to the Page Blob Update Sequence Number operation.\n   * @returns {Promise<PageBlobUpdateSequenceNumberResponse>} Response data for the Page Blob Update Sequence Number operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.updateSequenceNumber = function (sequenceNumberAction, sequenceNumber, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_42;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _b = createSpan(\"PageBlobClient-updateSequenceNumber\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {\n              abortSignal: options.abortSignal,\n              blobSequenceNumber: sequenceNumber,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_42 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_42.message\n            });\n            throw e_42;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.\n   * The snapshot is copied such that only the differential changes between the previously\n   * copied snapshot are transferred to the destination.\n   * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.\n   * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n   * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots\n   *\n   * @param {string} copySource Specifies the name of the source page blob snapshot. For example,\n   *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param {PageBlobStartCopyIncrementalOptions} [options] Options to the Page Blob Copy Incremental operation.\n   * @returns {Promise<PageBlobCopyIncrementalResponse>} Response data for the Page Blob Copy Incremental operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.startCopyIncremental = function (copySource, options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _b, span, spanOptions, e_43;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = createSpan(\"PageBlobClient-startCopyIncremental\", options.tracingOptions), span = _b.span, spanOptions = _b.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.copyIncremental(copySource, {\n              abortSignal: options.abortSignal,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions\n              }),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_43 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_43.message\n            });\n            throw e_43;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return PageBlobClient;\n}(BlobClient);\n\nexport { PageBlobClient };\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n *\n * @export\n * @class BlobLeaseClient\n */\n\nvar BlobLeaseClient =\n/** @class */\nfunction () {\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param {(ContainerClient | BlobClient)} client The client to make the lease operation requests.\n   * @param {string} leaseId Initial proposed lease id.\n   * @memberof BlobLeaseClient\n   */\n  function BlobLeaseClient(client, leaseId) {\n    var clientContext = new StorageClientContext(client.url, client.pipeline.toServiceClientOptions());\n    this._url = client.url;\n\n    if (client instanceof ContainerClient) {\n      this._isContainer = true;\n      this._containerOrBlobOperation = new Container(clientContext);\n    } else {\n      this._isContainer = false;\n      this._containerOrBlobOperation = new StorageBlob(clientContext);\n    }\n\n    if (!leaseId) {\n      leaseId = generateUuid();\n    }\n\n    this._leaseId = leaseId;\n  }\n\n  Object.defineProperty(BlobLeaseClient.prototype, \"leaseId\", {\n    /**\n     * Gets the lease Id.\n     *\n     * @readonly\n     * @memberof BlobLeaseClient\n     * @type {string}\n     */\n    get: function get() {\n      return this._leaseId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BlobLeaseClient.prototype, \"url\", {\n    /**\n     * Gets the url.\n     *\n     * @readonly\n     * @memberof BlobLeaseClient\n     * @type {string}\n     */\n    get: function get() {\n      return this._url;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Establishes and manages a lock on a container for delete operations, or on a blob\n   * for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {number} duration Must be between 15 to 60 seconds, or infinite (-1)\n   * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for acquire lease operation.\n   * @memberof BlobLeaseClient\n   */\n\n  BlobLeaseClient.prototype.acquireLease = function (duration, options) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _g, span, spanOptions, e_44;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _g = createSpan(\"BlobLeaseClient-acquireLease\", options.tracingOptions), span = _g.span, spanOptions = _g.spanOptions;\n\n            if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n              throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n            }\n\n            _h.label = 1;\n\n          case 1:\n            _h.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this._containerOrBlobOperation.acquireLease({\n              abortSignal: options.abortSignal,\n              duration: duration,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n              }),\n              proposedLeaseId: this._leaseId,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _h.sent()];\n\n          case 3:\n            e_44 = _h.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_44.message\n            });\n            throw e_44;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * To change the ID of the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {string} proposedLeaseId the proposed new lease Id.\n   * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for change lease operation.\n   * @memberof BlobLeaseClient\n   */\n\n\n  BlobLeaseClient.prototype.changeLease = function (proposedLeaseId, options) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _g, span, spanOptions, response, e_45;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _g = createSpan(\"BlobLeaseClient-changeLease\", options.tracingOptions), span = _g.span, spanOptions = _g.spanOptions;\n\n            if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n              throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n            }\n\n            _h.label = 1;\n\n          case 1:\n            _h.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, {\n              abortSignal: options.abortSignal,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n              }),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            response = _h.sent();\n            this._leaseId = proposedLeaseId;\n            return [2\n            /*return*/\n            , response];\n\n          case 3:\n            e_45 = _h.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_45.message\n            });\n            throw e_45;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container or the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for release lease operation.\n   * @memberof BlobLeaseClient\n   */\n\n\n  BlobLeaseClient.prototype.releaseLease = function (options) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _g, span, spanOptions, e_46;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _g = createSpan(\"BlobLeaseClient-releaseLease\", options.tracingOptions), span = _g.span, spanOptions = _g.spanOptions;\n\n            if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n              throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n            }\n\n            _h.label = 1;\n\n          case 1:\n            _h.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this._containerOrBlobOperation.releaseLease(this._leaseId, {\n              abortSignal: options.abortSignal,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n              }),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _h.sent()];\n\n          case 3:\n            e_46 = _h.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_46.message\n            });\n            throw e_46;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * To renew the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {LeaseOperationOptions} [options={}] Optional option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for renew lease operation.\n   * @memberof BlobLeaseClient\n   */\n\n\n  BlobLeaseClient.prototype.renewLease = function (options) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _g, span, spanOptions, e_47;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _g = createSpan(\"BlobLeaseClient-renewLease\", options.tracingOptions), span = _g.span, spanOptions = _g.spanOptions;\n\n            if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n              throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n            }\n\n            _h.label = 1;\n\n          case 1:\n            _h.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this._containerOrBlobOperation.renewLease(this._leaseId, {\n              abortSignal: options.abortSignal,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n              }),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _h.sent()];\n\n          case 3:\n            e_47 = _h.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_47.message\n            });\n            throw e_47;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @static\n   * @param {number} breakPeriod Break period\n   * @param {LeaseOperationOptions} [options={}] Optional options to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for break lease operation.\n   * @memberof BlobLeaseClient\n   */\n\n\n  BlobLeaseClient.prototype.breakLease = function (breakPeriod, options) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _g, span, spanOptions, operationOptions, e_48;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _g = createSpan(\"BlobLeaseClient-breakLease\", options.tracingOptions), span = _g.span, spanOptions = _g.spanOptions;\n\n            if (this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n              throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n            }\n\n            _h.label = 1;\n\n          case 1:\n            _h.trys.push([1, 3, 4, 5]);\n\n            operationOptions = {\n              abortSignal: options.abortSignal,\n              breakPeriod: breakPeriod,\n              modifiedAccessConditions: __assign(__assign({}, options.conditions), {\n                ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n              }),\n              spanOptions: spanOptions\n            };\n            return [4\n            /*yield*/\n            , this._containerOrBlobOperation.breakLease(operationOptions)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _h.sent()];\n\n          case 3:\n            e_48 = _h.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_48.message\n            });\n            throw e_48;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return BlobLeaseClient;\n}();\n\nexport { BlobLeaseClient };\n/**\n * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.\n *\n * @export\n * @class ContainerClient\n */\n\nvar ContainerClient =\n/** @class */\nfunction (_super) {\n  __extends(ContainerClient, _super);\n\n  function ContainerClient(urlOrConnectionString, credentialOrPipelineOrContainerName, options) {\n    var _this = this;\n\n    var pipeline;\n    var url;\n    options = options || {};\n\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== \"string\") {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === \"string\") {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      var containerName = credentialOrPipelineOrContainerName;\n      var extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n          url = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName));\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName parameter\");\n    }\n\n    _this = _super.call(this, url, pipeline) || this;\n    _this._containerName = _this.getContainerNameFromUrl();\n    _this.containerContext = new Container(_this.storageClientContext);\n    return _this;\n  }\n\n  Object.defineProperty(ContainerClient.prototype, \"containerName\", {\n    /**\n     * The name of the container.\n     */\n    get: function get() {\n      return this._containerName;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates a new container under the specified account. If the container with\n   * the same name already exists, the operation fails.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param {ContainerCreateOptions} [options] Options to Container Create operation.\n   * @returns {Promise<ContainerCreateResponse>}\n   * @memberof ContainerClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n   * const createContainerResponse = await containerClient.create();\n   * console.log(\"Container was created successfully\", createContainerResponse.requestId);\n   * ```\n   */\n\n  ContainerClient.prototype.create = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_49;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-create\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.create(__assign(__assign({}, options), {\n              spanOptions: spanOptions\n            }))];\n\n          case 2:\n            // Spread operator in destructuring assignments,\n            // this will filter out unwanted properties from the response object into result object\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_49 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_49.message\n            });\n            throw e_49;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new container under the specified account. If the container with\n   * the same name already exists, it is not changed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param {ContainerCreateOptions} [options]\n   * @returns {Promise<ContainerCreateIfNotExistsResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.createIfNotExists = function (options) {\n    var _a, _b;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _c, span, spanOptions, res, e_50;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _c = createSpan(\"ContainerClient-createIfNotExists\", options.tracingOptions), span = _c.span, spanOptions = _c.spanOptions;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.create(__assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            res = _d.sent();\n            return [2\n            /*return*/\n            , __assign(__assign({\n              succeeded: true\n            }, res), {\n              _response: res._response // _response is made non-enumerable\n\n            })];\n\n          case 3:\n            e_50 = _d.sent();\n\n            if (((_a = e_50.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"ContainerAlreadyExists\") {\n              span.setStatus({\n                code: CanonicalCode.ALREADY_EXISTS,\n                message: \"Expected exception when creating a container only if it does not already exist.\"\n              });\n              return [2\n              /*return*/\n              , __assign(__assign({\n                succeeded: false\n              }, (_b = e_50.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {\n                _response: e_50.response\n              })];\n            }\n\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_50.message\n            });\n            throw e_50;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns true if the Azure container resource represented by this client exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing container might be deleted by other clients or\n   * applications. Vice versa new containers with the same name might be added by other clients or\n   * applications after this function completes.\n   *\n   * @param {ContainerExistsOptions} [options={}]\n   * @returns {Promise<boolean>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.exists = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_51;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-exists\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.getProperties({\n              abortSignal: options.abortSignal,\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            })];\n\n          case 2:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 3:\n            e_51 = _b.sent();\n\n            if (e_51.statusCode === 404) {\n              span.setStatus({\n                code: CanonicalCode.NOT_FOUND,\n                message: \"Expected exception when checking container existence\"\n              });\n              return [2\n              /*return*/\n              , false];\n            }\n\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_51.message\n            });\n            throw e_51;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a {@link BlobClient}\n   *\n   * @param {string} blobName A blob name\n   * @returns {BlobClient} A new BlobClient object for the given blob name.\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getBlobClient = function (blobName) {\n    return new BlobClient(appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);\n  };\n  /**\n   * Creates an {@link AppendBlobClient}\n   *\n   * @param {string} blobName An append blob name\n   * @returns {AppendBlobClient}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getAppendBlobClient = function (blobName) {\n    return new AppendBlobClient(appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);\n  };\n  /**\n   * Creates a {@link BlockBlobClient}\n   *\n   * @param {string} blobName A block blob name\n   * @returns {BlockBlobClient}\n   * @memberof ContainerClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const content = \"Hello world!\";\n   *\n   * const blockBlobClient = containerClient.getBlockBlobClient(\"<blob name>\");\n   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n   * ```\n   */\n\n\n  ContainerClient.prototype.getBlockBlobClient = function (blobName) {\n    return new BlockBlobClient(appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);\n  };\n  /**\n   * Creates a {@link PageBlobClient}\n   *\n   * @param {string} blobName A page blob name\n   * @returns {PageBlobClient}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getPageBlobClient = function (blobName) {\n    return new PageBlobClient(appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);\n  };\n  /**\n   * Returns all user-defined metadata and system properties for the specified\n   * container. The data returned does not include the container's list of blobs.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @param {ContainerGetPropertiesOptions} [options] Options to Container Get Properties operation.\n   * @returns {Promise<ContainerGetPropertiesResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getProperties = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_52;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            _a = createSpan(\"ContainerClient-getProperties\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.getProperties(__assign(__assign({\n              abortSignal: options.abortSignal\n            }, options.conditions), {\n              spanOptions: spanOptions\n            }))];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_52 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_52.message\n            });\n            throw e_52;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Marks the specified container for deletion. The container and any blobs\n   * contained within it are later deleted during garbage collection.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param {ContainerDeleteMethodOptions} [options] Options to Container Delete operation.\n   * @returns {Promise<ContainerDeleteResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.delete = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_53;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            _a = createSpan(\"ContainerClient-delete\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.deleteMethod({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_53 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_53.message\n            });\n            throw e_53;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Marks the specified container for deletion if it exists. The container and any blobs\n   * contained within it are later deleted during garbage collection.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param {ContainerDeleteMethodOptions} [options] Options to Container Delete operation.\n   * @returns {Promise<ContainerDeleteIfExistsResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.deleteIfExists = function (options) {\n    var _a, _b;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _c, span, spanOptions, res, e_54;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _c = createSpan(\"ContainerClient-deleteIfExists\", options.tracingOptions), span = _c.span, spanOptions = _c.spanOptions;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.delete(__assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            res = _d.sent();\n            return [2\n            /*return*/\n            , __assign(__assign({\n              succeeded: true\n            }, res), {\n              _response: res._response // _response is made non-enumerable\n\n            })];\n\n          case 3:\n            e_54 = _d.sent();\n\n            if (((_a = e_54.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"ContainerNotFound\") {\n              span.setStatus({\n                code: CanonicalCode.NOT_FOUND,\n                message: \"Expected exception when deleting a container only if it exists.\"\n              });\n              return [2\n              /*return*/\n              , __assign(__assign({\n                succeeded: false\n              }, (_b = e_54.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), {\n                _response: e_54.response\n              })];\n            }\n\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_54.message\n            });\n            throw e_54;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets one or more user-defined name-value pairs for the specified container.\n   *\n   * If no option provided, or no metadata defined in the parameter, the container\n   * metadata will be removed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n   *\n   * @param {Metadata} [metadata] Replace existing metadata with this value.\n   *                            If no value provided the existing metadata will be removed.\n   * @param {ContainerSetMetadataOptions} [options] Options to Container Set Metadata operation.\n   * @returns {Promise<ContainerSetMetadataResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.setMetadata = function (metadata, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_55;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            if (options.conditions.ifUnmodifiedSince) {\n              throw new RangeError(\"the IfUnmodifiedSince must have their default values because they are ignored by the blob service\");\n            }\n\n            _a = createSpan(\"ContainerClient-setMetadata\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.setMetadata({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              metadata: metadata,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_55 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_55.message\n            });\n            throw e_55;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the permissions for the specified container. The permissions indicate\n   * whether container data may be accessed publicly.\n   *\n   * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n   *\n   * @param {ContainerGetAccessPolicyOptions} [options] Options to Container Get Access Policy operation.\n   * @returns {Promise<ContainerGetAccessPolicyResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getAccessPolicy = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, response, res, _i, response_1, identifier, accessPolicy, e_56;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            _a = createSpan(\"ContainerClient-getAccessPolicy\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.getAccessPolicy({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            response = _b.sent();\n            res = {\n              _response: response._response,\n              blobPublicAccess: response.blobPublicAccess,\n              date: response.date,\n              etag: response.etag,\n              errorCode: response.errorCode,\n              lastModified: response.lastModified,\n              requestId: response.requestId,\n              clientRequestId: response.clientRequestId,\n              signedIdentifiers: [],\n              version: response.version\n            };\n\n            for (_i = 0, response_1 = response; _i < response_1.length; _i++) {\n              identifier = response_1[_i];\n              accessPolicy = undefined;\n\n              if (identifier.accessPolicy) {\n                accessPolicy = {\n                  permissions: identifier.accessPolicy.permissions\n                };\n\n                if (identifier.accessPolicy.expiresOn) {\n                  accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);\n                }\n\n                if (identifier.accessPolicy.startsOn) {\n                  accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);\n                }\n              }\n\n              res.signedIdentifiers.push({\n                accessPolicy: accessPolicy,\n                id: identifier.id\n              });\n            }\n\n            return [2\n            /*return*/\n            , res];\n\n          case 3:\n            e_56 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_56.message\n            });\n            throw e_56;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets the permissions for the specified container. The permissions indicate\n   * whether blobs in a container may be accessed publicly.\n   *\n   * When you set permissions for a container, the existing permissions are replaced.\n   * If no access or containerAcl provided, the existing container ACL will be\n   * removed.\n   *\n   * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.\n   * During this interval, a shared access signature that is associated with the stored access policy will\n   * fail with status code 403 (Forbidden), until the access policy becomes active.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n   *\n   * @param {PublicAccessType} [access] The level of public access to data in the container.\n   * @param {SignedIdentifier[]} [containerAcl] Array of elements each having a unique Id and details of the access policy.\n   * @param {ContainerSetAccessPolicyOptions} [options] Options to Container Set Access Policy operation.\n   * @returns {Promise<ContainerSetAccessPolicyResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.setAccessPolicy = function (access, containerAcl, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, acl, _i, _b, identifier, e_57;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"ContainerClient-setAccessPolicy\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            acl = [];\n\n            for (_i = 0, _b = containerAcl || []; _i < _b.length; _i++) {\n              identifier = _b[_i];\n              acl.push({\n                accessPolicy: {\n                  expiresOn: identifier.accessPolicy.expiresOn ? truncatedISO8061Date(identifier.accessPolicy.expiresOn) : \"\",\n                  permissions: identifier.accessPolicy.permissions,\n                  startsOn: identifier.accessPolicy.startsOn ? truncatedISO8061Date(identifier.accessPolicy.startsOn) : \"\"\n                },\n                id: identifier.id\n              });\n            }\n\n            return [4\n            /*yield*/\n            , this.containerContext.setAccessPolicy({\n              abortSignal: options.abortSignal,\n              access: access,\n              containerAcl: acl,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_57 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_57.message\n            });\n            throw e_57;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Get a {@link BlobLeaseClient} that manages leases on the container.\n   *\n   * @param {string} [proposeLeaseId] Initial proposed lease Id.\n   * @returns {BlobLeaseClient} A new BlobLeaseClient object for managing leases on the container.\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getBlobLeaseClient = function (proposeLeaseId) {\n    return new BlobLeaseClient(this, proposeLeaseId);\n  };\n  /**\n   * Creates a new block blob, or updates the content of an existing block blob.\n   *\n   * Updating an existing block blob overwrites any existing metadata on the blob.\n   * Partial updates are not supported; the content of the existing blob is\n   * overwritten with the new content. To perform a partial update of a block blob's,\n   * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.\n   *\n   * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},\n   * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better\n   * performance with concurrency uploading.\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {string} blobName Name of the block blob to create or update.\n   * @param {HttpRequestBody} body Blob, string, ArrayBuffer, ArrayBufferView or a function\n   *                               which returns a new Readable stream whose offset is from data source beginning.\n   * @param {number} contentLength Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n   *                               string including non non-Base64/Hex-encoded characters.\n   * @param {BlockBlobUploadOptions} [options] Options to configure the Block Blob Upload operation.\n   * @returns {Promise<{ blockBlobClient: BlockBlobClient; response: BlockBlobUploadResponse }>} Block Blob upload response data and the corresponding BlockBlobClient instance.\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.uploadBlockBlob = function (blobName, body, contentLength, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, blockBlobClient, response, e_58;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-uploadBlockBlob\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            blockBlobClient = this.getBlockBlobClient(blobName);\n            return [4\n            /*yield*/\n            , blockBlobClient.upload(body, contentLength, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            response = _b.sent();\n            return [2\n            /*return*/\n            , {\n              blockBlobClient: blockBlobClient,\n              response: response\n            }];\n\n          case 3:\n            e_58 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_58.message\n            });\n            throw e_58;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Marks the specified blob or snapshot for deletion. The blob is later deleted\n   * during garbage collection. Note that in order to delete a blob, you must delete\n   * all of its snapshots. You can delete both at the same time with the Delete\n   * Blob operation.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n   *\n   * @param {string} blobName\n   * @param {ContainerDeleteBlobOptions} [options] Options to Blob Delete operation.\n   * @returns {Promise<BlobDeleteResponse>} Block blob deletion response data.\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.deleteBlob = function (blobName, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, blobClient, e_59;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-deleteBlob\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            blobClient = this.getBlobClient(blobName);\n\n            if (options.versionId) {\n              blobClient = blobClient.withVersion(options.versionId);\n            }\n\n            return [4\n            /*yield*/\n            , blobClient.delete(__assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_59 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_59.message\n            });\n            throw e_59;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * listBlobFlatSegment returns a single segment of blobs starting from the\n   * specified Marker. Use an empty Marker to start enumeration from the beginning.\n   * After getting a segment, process it, and then call listBlobsFlatSegment again\n   * (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param {string} [marker] A string value that identifies the portion of the list to be returned with the next list operation.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to Container List Blob Flat Segment operation.\n   * @returns {Promise<ContainerListBlobFlatSegmentResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listBlobFlatSegment = function (marker, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, response, wrappedResponse, e_60;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-listBlobFlatSegment\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.listBlobFlatSegment(__assign(__assign({\n              marker: marker\n            }, options), {\n              spanOptions: spanOptions\n            }))];\n\n          case 2:\n            response = _b.sent();\n            wrappedResponse = __assign(__assign({}, response), {\n              _response: response._response,\n              segment: __assign(__assign({}, response.segment), {\n                blobItems: response.segment.blobItems.map(function (blobItemInteral) {\n                  var blobItem = __assign(__assign({}, blobItemInteral), {\n                    tags: toTags(blobItemInteral.blobTags),\n                    objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInteral.objectReplicationMetadata)\n                  });\n\n                  return blobItem;\n                })\n              })\n            });\n            return [2\n            /*return*/\n            , wrappedResponse];\n\n          case 3:\n            e_60 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_60.message\n            });\n            throw e_60;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * listBlobHierarchySegment returns a single segment of blobs starting from\n   * the specified Marker. Use an empty Marker to start enumeration from the\n   * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment\n   * again (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param {string} delimiter The character or string used to define the virtual hierarchy\n   * @param {string} [marker] A string value that identifies the portion of the list to be returned with the next list operation.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to Container List Blob Hierarchy Segment operation.\n   * @returns {Promise<ContainerListBlobHierarchySegmentResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listBlobHierarchySegment = function (delimiter, marker, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, response, wrappedResponse, e_61;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-listBlobHierarchySegment\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.listBlobHierarchySegment(delimiter, __assign(__assign({\n              marker: marker\n            }, options), {\n              spanOptions: spanOptions\n            }))];\n\n          case 2:\n            response = _b.sent();\n            wrappedResponse = __assign(__assign({}, response), {\n              _response: response._response,\n              segment: __assign(__assign({}, response.segment), {\n                blobItems: response.segment.blobItems.map(function (blobItemInteral) {\n                  var blobItem = __assign(__assign({}, blobItemInteral), {\n                    tags: toTags(blobItemInteral.blobTags),\n                    objectReplicationSourceProperties: parseObjectReplicationRecord(blobItemInteral.objectReplicationMetadata)\n                  });\n\n                  return blobItem;\n                })\n              })\n            });\n            return [2\n            /*return*/\n            , wrappedResponse];\n\n          case 3:\n            e_61 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_61.message\n            });\n            throw e_61;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse\n   *\n   * @private\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the ContinuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The ContinuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<ContainerListBlobFlatSegmentResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listSegments = function (marker, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __asyncGenerator(this, arguments, function listSegments_1() {\n      var listBlobsFlatSegmentResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(!!marker || marker === undefined)) return [3\n            /*break*/\n            , 7];\n            _a.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , __await(this.listBlobFlatSegment(marker, options))];\n\n          case 2:\n            listBlobsFlatSegmentResponse = _a.sent();\n            marker = listBlobsFlatSegmentResponse.continuationToken;\n            return [4\n            /*yield*/\n            , __await(listBlobsFlatSegmentResponse)];\n\n          case 3:\n            return [4\n            /*yield*/\n            , __await.apply(void 0, [_a.sent()])];\n\n          case 4:\n            return [4\n            /*yield*/\n            , _a.sent()];\n\n          case 5:\n            _a.sent();\n\n            _a.label = 6;\n\n          case 6:\n            if (marker) return [3\n            /*break*/\n            , 1];\n            _a.label = 7;\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an AsyncIterableIterator of {@link BlobItem} objects\n   *\n   * @private\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<BlobItem>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listItems = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __asyncGenerator(this, arguments, function listItems_1() {\n      var marker, _a, _b, listBlobsFlatSegmentResponse, e_62_1;\n\n      var e_62, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 7, 8, 13]);\n\n            _a = __asyncValues(this.listSegments(marker, options));\n            _d.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , __await(_a.next())];\n\n          case 2:\n            if (!(_b = _d.sent(), !_b.done)) return [3\n            /*break*/\n            , 6];\n            listBlobsFlatSegmentResponse = _b.value;\n            return [5\n            /*yield**/\n            , __values(__asyncDelegator(__asyncValues(listBlobsFlatSegmentResponse.segment.blobItems)))];\n\n          case 3:\n            return [4\n            /*yield*/\n            , __await.apply(void 0, [_d.sent()])];\n\n          case 4:\n            _d.sent();\n\n            _d.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 1];\n\n          case 6:\n            return [3\n            /*break*/\n            , 13];\n\n          case 7:\n            e_62_1 = _d.sent();\n            e_62 = {\n              error: e_62_1\n            };\n            return [3\n            /*break*/\n            , 13];\n\n          case 8:\n            _d.trys.push([8,, 11, 12]);\n\n            if (!(_b && !_b.done && (_c = _a.return))) return [3\n            /*break*/\n            , 10];\n            return [4\n            /*yield*/\n            , __await(_c.call(_a))];\n\n          case 9:\n            _d.sent();\n\n            _d.label = 10;\n\n          case 10:\n            return [3\n            /*break*/\n            , 12];\n\n          case 11:\n            if (e_62) throw e_62.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 12:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 13:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an async iterable iterator to list all the blobs\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * // Get the containerClient before you run these snippets,\n   * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\");`\n   * let i = 1;\n   * for await (const blob of containerClient.listBlobsFlat()) {\n   *   console.log(`Blob ${i++}: ${blob.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * let iter = containerClient.listBlobsFlat();\n   * let blobItem = await iter.next();\n   * while (!blobItem.done) {\n   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n   *   blobItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {\n   *   for (const blob of response.segment.blobItems) {\n   *     console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 blob names\n   * for (const blob of response.segment.blobItems) {\n   *   console.log(`Blob ${i++}: ${blob.name}`);\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   *\n   * // Passing next marker as continuationToken\n   *\n   * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 blob names\n   * for (const blob of response.segment.blobItems) {\n   *   console.log(`Blob ${i++}: ${blob.name}`);\n   * }\n   * ```\n   *\n   * @param {ContainerListBlobsOptions} [options={}] Options to list blobs.\n   * @returns {PagedAsyncIterableIterator<BlobItem, ContainerListBlobFlatSegmentResponse>} An asyncIterableIterator that supports paging.\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listBlobsFlat = function (options) {\n    var _a;\n\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var include = [];\n\n    if (options.includeCopy) {\n      include.push(\"copy\");\n    }\n\n    if (options.includeDeleted) {\n      include.push(\"deleted\");\n    }\n\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n\n    if (options.includeSnapshots) {\n      include.push(\"snapshots\");\n    }\n\n    if (options.includeVersions) {\n      include.push(\"versions\");\n    }\n\n    if (options.includeUncommitedBlobs) {\n      include.push(\"uncommittedblobs\");\n    }\n\n    if (options.includeTags) {\n      include.push(\"tags\");\n    }\n\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    var updatedOptions = __assign(__assign({}, options), include.length > 0 ? {\n      include: include\n    } : {}); // AsyncIterableIterator to iterate over blobs\n\n\n    var iter = this.listItems(updatedOptions);\n    return _a = {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      next: function next() {\n        return iter.next();\n      }\n    },\n    /**\n     * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n     */\n    _a[Symbol.asyncIterator] = function () {\n      return this;\n    },\n    /**\n     * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n     */\n    _a.byPage = function (settings) {\n      if (settings === void 0) {\n        settings = {};\n      }\n\n      return _this.listSegments(settings.continuationToken, __assign({\n        maxPageSize: settings.maxPageSize\n      }, updatedOptions));\n    }, _a;\n  };\n  /**\n   * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse\n   *\n   * @private\n   * @param {string} delimiter The character or string used to define the virtual hierarchy\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the ContinuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The ContinuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<ContainerListBlobHierarchySegmentResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listHierarchySegments = function (delimiter, marker, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __asyncGenerator(this, arguments, function listHierarchySegments_1() {\n      var listBlobsHierarchySegmentResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(!!marker || marker === undefined)) return [3\n            /*break*/\n            , 7];\n            _a.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , __await(this.listBlobHierarchySegment(delimiter, marker, options))];\n\n          case 2:\n            listBlobsHierarchySegmentResponse = _a.sent();\n            marker = listBlobsHierarchySegmentResponse.continuationToken;\n            return [4\n            /*yield*/\n            , __await(listBlobsHierarchySegmentResponse)];\n\n          case 3:\n            return [4\n            /*yield*/\n            , __await.apply(void 0, [_a.sent()])];\n\n          case 4:\n            return [4\n            /*yield*/\n            , _a.sent()];\n\n          case 5:\n            _a.sent();\n\n            _a.label = 6;\n\n          case 6:\n            if (marker) return [3\n            /*break*/\n            , 1];\n            _a.label = 7;\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.\n   *\n   * @private\n   * @param {string} delimiter The character or string used to define the virtual hierarchy\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<{ kind: \"prefix\" } & BlobPrefix | { kind: \"blob\" } & BlobItem>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listItemsByHierarchy = function (delimiter, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __asyncGenerator(this, arguments, function listItemsByHierarchy_1() {\n      var marker, _a, _b, listBlobsHierarchySegmentResponse, segment, _i, _c, prefix, _d, _e, blob, e_63_1;\n\n      var e_63, _f;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            _g.trys.push([0, 14, 15, 20]);\n\n            _a = __asyncValues(this.listHierarchySegments(delimiter, marker, options));\n            _g.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , __await(_a.next())];\n\n          case 2:\n            if (!(_b = _g.sent(), !_b.done)) return [3\n            /*break*/\n            , 13];\n            listBlobsHierarchySegmentResponse = _b.value;\n            segment = listBlobsHierarchySegmentResponse.segment;\n            if (!segment.blobPrefixes) return [3\n            /*break*/\n            , 7];\n            _i = 0, _c = segment.blobPrefixes;\n            _g.label = 3;\n\n          case 3:\n            if (!(_i < _c.length)) return [3\n            /*break*/\n            , 7];\n            prefix = _c[_i];\n            return [4\n            /*yield*/\n            , __await(__assign({\n              kind: \"prefix\"\n            }, prefix))];\n\n          case 4:\n            return [4\n            /*yield*/\n            , _g.sent()];\n\n          case 5:\n            _g.sent();\n\n            _g.label = 6;\n\n          case 6:\n            _i++;\n            return [3\n            /*break*/\n            , 3];\n\n          case 7:\n            _d = 0, _e = segment.blobItems;\n            _g.label = 8;\n\n          case 8:\n            if (!(_d < _e.length)) return [3\n            /*break*/\n            , 12];\n            blob = _e[_d];\n            return [4\n            /*yield*/\n            , __await(__assign({\n              kind: \"blob\"\n            }, blob))];\n\n          case 9:\n            return [4\n            /*yield*/\n            , _g.sent()];\n\n          case 10:\n            _g.sent();\n\n            _g.label = 11;\n\n          case 11:\n            _d++;\n            return [3\n            /*break*/\n            , 8];\n\n          case 12:\n            return [3\n            /*break*/\n            , 1];\n\n          case 13:\n            return [3\n            /*break*/\n            , 20];\n\n          case 14:\n            e_63_1 = _g.sent();\n            e_63 = {\n              error: e_63_1\n            };\n            return [3\n            /*break*/\n            , 20];\n\n          case 15:\n            _g.trys.push([15,, 18, 19]);\n\n            if (!(_b && !_b.done && (_f = _a.return))) return [3\n            /*break*/\n            , 17];\n            return [4\n            /*yield*/\n            , __await(_f.call(_a))];\n\n          case 16:\n            _g.sent();\n\n            _g.label = 17;\n\n          case 17:\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            if (e_63) throw e_63.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 19:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 20:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an async iterable iterator to list all the blobs by hierarchy.\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * for await (const item of containerClient.listBlobsByHierarchy(\"/\")) {\n   *   if (item.kind === \"prefix\") {\n   *     console.log(`\\tBlobPrefix: ${item.name}`);\n   *   } else {\n   *     console.log(`\\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let iter = containerClient.listBlobsByHierarchy(\"/\", { prefix: \"prefix1/\" });\n   * let entity = await iter.next();\n   * while (!entity.done) {\n   *   let item = entity.value;\n   *   if (item.kind === \"prefix\") {\n   *     console.log(`\\tBlobPrefix: ${item.name}`);\n   *   } else {\n   *     console.log(`\\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);\n   *   }\n   *   entity = await iter.next();\n   * }\n   * ```js\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * console.log(\"Listing blobs by hierarchy by page\");\n   * for await (const response of containerClient.listBlobsByHierarchy(\"/\").byPage()) {\n   *   const segment = response.segment;\n   *   if (segment.blobPrefixes) {\n   *     for (const prefix of segment.blobPrefixes) {\n   *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n   *     }\n   *   }\n   *   for (const blob of response.segment.blobItems) {\n   *     console.log(`\\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a max page size:\n   *\n   * ```js\n   * console.log(\"Listing blobs by hierarchy by page, specifying a prefix and a max page size\");\n   *\n   * let i = 1;\n   * for await (const response of containerClient.listBlobsByHierarchy(\"/\", { prefix: \"prefix2/sub1/\"}).byPage({ maxPageSize: 2 })) {\n   *   console.log(`Page ${i++}`);\n   *   const segment = response.segment;\n   *\n   *   if (segment.blobPrefixes) {\n   *     for (const prefix of segment.blobPrefixes) {\n   *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n   *     }\n   *   }\n   *\n   *   for (const blob of response.segment.blobItems) {\n   *     console.log(`\\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param {string} delimiter The character or string used to define the virtual hierarchy\n   * @param {ContainerListBlobsOptions} [options={}] Options to list blobs operation.\n   * @returns {(PagedAsyncIterableIterator<\n   *   { kind: \"prefix\" } & BlobPrefix | { kind: \"blob\" } & BlobItem,\n   *     ContainerListBlobHierarchySegmentResponse\n   *   >)}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listBlobsByHierarchy = function (delimiter, options) {\n    var _a;\n\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (delimiter === \"\") {\n      throw new RangeError(\"delimiter should contain one or more characters\");\n    }\n\n    var include = [];\n\n    if (options.includeCopy) {\n      include.push(\"copy\");\n    }\n\n    if (options.includeDeleted) {\n      include.push(\"deleted\");\n    }\n\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n\n    if (options.includeSnapshots) {\n      include.push(\"snapshots\");\n    }\n\n    if (options.includeVersions) {\n      include.push(\"versions\");\n    }\n\n    if (options.includeUncommitedBlobs) {\n      include.push(\"uncommittedblobs\");\n    }\n\n    if (options.includeTags) {\n      include.push(\"tags\");\n    }\n\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    var updatedOptions = __assign(__assign({}, options), include.length > 0 ? {\n      include: include\n    } : {}); // AsyncIterableIterator to iterate over blob prefixes and blobs\n\n\n    var iter = this.listItemsByHierarchy(delimiter, updatedOptions);\n    return _a = {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      next: function next() {\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2\n            /*return*/\n            , iter.next()];\n          });\n        });\n      }\n    },\n    /**\n     * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n     */\n    _a[Symbol.asyncIterator] = function () {\n      return this;\n    },\n    /**\n     * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n     */\n    _a.byPage = function (settings) {\n      if (settings === void 0) {\n        settings = {};\n      }\n\n      return _this.listHierarchySegments(delimiter, settings.continuationToken, __assign({\n        maxPageSize: settings.maxPageSize\n      }, updatedOptions));\n    }, _a;\n  };\n\n  ContainerClient.prototype.getContainerNameFromUrl = function () {\n    var containerName;\n\n    try {\n      //  URL may look like the following\n      // \"https://myaccount.blob.core.windows.net/mycontainer?sasString\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer\";\n      // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`\n      // http://localhost:10001/devstoreaccount1/containername\n      var parsedUrl = URLBuilder.parse(this.url);\n\n      if (parsedUrl.getHost().split(\".\")[1] === \"blob\") {\n        // \"https://myaccount.blob.core.windows.net/containername\".\n        // \"https://customdomain.com/containername\".\n        // .getPath() -> /containername\n        containerName = parsedUrl.getPath().split(\"/\")[1];\n      } else if (isIpEndpointStyle(parsedUrl)) {\n        // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername\n        // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername\n        // .getPath() -> /devstoreaccount1/containername\n        containerName = parsedUrl.getPath().split(\"/\")[2];\n      } else {\n        // \"https://customdomain.com/containername\".\n        // .getPath() -> /containername\n        containerName = parsedUrl.getPath().split(\"/\")[1];\n      } // decode the encoded containerName - to get all the special characters that might be present in it\n\n\n      containerName = decodeURIComponent(containerName);\n\n      if (!containerName) {\n        throw new Error(\"Provided containerName is invalid.\");\n      }\n\n      return containerName;\n    } catch (error) {\n      throw new Error(\"Unable to extract containerName with provided information.\");\n    }\n  };\n\n  return ContainerClient;\n}(StorageClient);\n\nexport { ContainerClient };"],"sourceRoot":""}