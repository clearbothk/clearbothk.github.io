{"version":3,"sources":["webpack:///./node_modules/@azure/storage-blob/dist-esm/src/Clients.js"],"names":["BlobClient","_super","urlOrConnectionString","credentialOrPipelineOrContainerName","blobNameOrOptions","options","_a","pipeline","url","_this","this","Error","containerName","blobName","extractedCreds","kind","sharedKeyCredential","accountName","accountKey","encodeURIComponent","proxyOptions","proxyUri","accountSas","call","getBlobAndContainerNamesFromUrl","_name","_containerName","blobContext","storageClientContext","Object","defineProperty","prototype","get","enumerable","configurable","withSnapshot","snapshot","Parameters","SNAPSHOT","length","undefined","getAppendBlobClient","AppendBlobClient","getBlockBlobClient","BlockBlobClient","getPageBlobClient","PageBlobClient","download","offset","count","span","spanOptions","res_1","e_1","_b","label","conditions","customerProvidedKey","isHttps","tracingOptions","trys","push","abortSignal","leaseAccessConditions","modifiedAccessConditions","onDownloadProgress","onProgress","range","rangeGetContentMD5","rangeGetContentCRC64","rangeGetContentCrc64","cpkInfo","sent","maxRetryRequests","contentLength","RangeError","etag","start","updatedOptions","ifMatch","ifModifiedSince","ifNoneMatch","ifUnmodifiedSince","readableStreamBody","setStatus","code","UNKNOWN","message","end","exists","e_2","getProperties","statusCode","NOT_FOUND","e_3","e_4","deleteMethod","deleteSnapshots","undelete","e_5","setHTTPHeaders","blobHTTPHeaders","e_6","setMetadata","metadata","e_7","encryptionScope","getBlobLeaseClient","proposeLeaseId","BlobLeaseClient","createSnapshot","e_8","beginCopyFromURL","copySource","client","poller","abortCopyFromURL","args","_i","arguments","apply","startCopyFromURL","blobClient","intervalInMs","resumeFrom","startCopyFromURLOptions","poll","copyId","e_9","syncCopyFromURL","e_10","sourceConditions","copyFromURL","sourceModifiedAccessConditions","sourceIfMatch","sourceIfModifiedSince","sourceIfNoneMatch","sourceIfUnmodifiedSince","sourceContentMD5","setAccessTier","tier","e_11","setTier","rehydratePriority","downloadToBuffer","param1","param2","param3","param4","buffer","response","transferProgress_1","batch","_loop_1","off","e_12","Buffer","blockSize","alloc","error","concurrency","addOperation","chunkEnd","stream","maxRetryRequestsPerBlock","loadedBytes","downloadToFile","filePath","e_13","blobDownloadStream","pathComponents","parsedUrl","parse","getHost","split","getPath","match","decodeURIComponent","replace","e_14","appendBlobContext","create","e_15","appendBlock","body","e_16","appendPositionAccessConditions","onUploadProgress","transactionalContentMD5","transactionalContentCrc64","appendBlockFromURL","sourceURL","sourceOffset","e_17","appendBlockFromUrl","sourceRange","sourceContentCrc64","blockBlobContext","upload","e_18","stageBlock","blockId","e_19","stageBlockFromURL","e_20","commitBlockList","blocks","e_21","latest","getBlockList","listType","res","e_22","committedBlocks","uncommittedBlocks","uploadBrowserData","browserData","browserBlob_1","e_23","Blob","uploadSeekableBlob","size","slice","blobFactory","numBlocks_1","blockList_1","blockIDPrefix_1","transferProgress_2","_loop_2","i","e_24","maxSingleShotSize","Math","ceil","floor","blockID","uploadFile","e_25","uploadResetableStream","autoClose","Infinity","uploadStream","bufferSize","maxConcurrency","blockNum_1","blockIDPrefix_2","transferProgress_3","blockList_2","e_26","streamFactory","numBlocks_2","blockList_3","blockIDPrefix_3","transferProgress_4","_loop_3","e_27","pageBlobContext","e_28","blobSequenceNumber","uploadPages","e_29","sequenceNumberAccessConditions","uploadPagesFromURL","destOffset","e_30","clearPages","e_31","getPageRanges","e_32","then","getPageRangesDiff","prevSnapshot","e_33","prevsnapshot","getPageRangesDiffForManagedDisks","prevSnapshotUrl","e_34","resize","e_35","updateSequenceNumber","sequenceNumberAction","sequenceNumber","e_36","startCopyIncremental","e_37","copyIncremental","leaseId","clientContext","toServiceClientOptions","_url","_containerOrBlobOperation","ContainerClient","_leaseId","acquireLease","duration","e_38","proposedLeaseId","changeLease","e_39","releaseLease","e_40","renewLease","e_41","breakLease","breakPeriod","operationOptions","e_42","getContainerNameFromUrl","containerContext","e_43","e_44","getBlobClient","e_45","e_46","e_47","getAccessPolicy","response_1","identifier","accessPolicy","e_48","_response","blobPublicAccess","date","errorCode","lastModified","requestId","clientRequestId","signedIdentifiers","version","permissions","expiresOn","Date","startsOn","id","setAccessPolicy","access","containerAcl","acl","e_49","_c","uploadBlockBlob","blockBlobClient","e_50","deleteBlob","e_51","listBlobFlatSegment","marker","e_52","listBlobHierarchySegment","delimiter","e_53","listSegments","listBlobsFlatSegmentResponse","continuationToken","listItems","e_54_1","e_54","_d","next","done","value","segment","blobItems","listBlobsFlat","include","includeCopy","includeDeleted","includeMetadata","includeSnapshots","includeUncommitedBlobs","prefix","iter","Symbol","asyncIterator","byPage","settings","maxPageSize","listHierarchySegments","listBlobsHierarchySegmentResponse","listItemsByHierarchy","_e","blob","e_55_1","e_55","_f","_g","blobPrefixes","listBlobsByHierarchy"],"mappings":"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","file":"cde52872-85768ec8534f47fc1349.js","sourcesContent":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.object.define-property\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { __assign, __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter, __extends, __generator, __values } from \"tslib\";\nimport { isNode, isTokenCredential, getDefaultProxySettings, URLBuilder } from \"@azure/core-http\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { BlobDownloadResponse } from \"./BlobDownloadResponse\";\nimport { Blob as StorageBlob } from \"./generated/src/operations\";\nimport { rangeToString } from \"./Range\";\nimport { ensureCpkIfSpecified, toAccessTier } from \"./models\";\nimport { newPipeline, Pipeline } from \"./Pipeline\";\nimport { DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS, URLConstants, DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES, DEFAULT_BLOCK_BUFFER_SIZE_BYTES } from \"./utils/constants\";\nimport { setURLParameter, extractConnectionStringParts, appendToURLPath } from \"./utils/utils.common\";\nimport { fsStat, readStreamToLocalFile, streamToBuffer } from \"./utils/utils.node\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { Batch } from \"./utils/Batch\";\nimport { createSpan } from \"./utils/tracing\";\nimport { AppendBlob } from \"./generated/src/operations\";\nimport { StorageClient } from \"./StorageClient\";\nimport * as fs from \"fs\";\nimport { generateUuid } from \"@azure/core-http\";\nimport { BlockBlob } from \"./generated/src/operations\";\nimport { generateBlockID } from \"./utils/utils.common\";\nimport { BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES, BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES, BLOCK_BLOB_MAX_BLOCKS } from \"./utils/constants\";\nimport { BufferScheduler } from \"./utils/BufferScheduler\";\nimport { PageBlob } from \"./generated/src/operations\";\nimport { rangeResponseFromModel } from \"./PageBlobRangeResponse\";\nimport { BlobBeginCopyFromUrlPoller } from \"./pollers/BlobStartCopyFromUrlPoller\";\nimport { StorageClientContext } from \"./generated/src/storageClient\";\nimport { Container } from \"./generated/src/operations\";\nimport { ETagNone } from \"./utils/constants\";\nimport { truncatedISO8061Date } from \"./utils/utils.common\";\nimport \"@azure/core-paging\";\n/**\n * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,\n * append blob, or page blob.\n *\n * @export\n * @class BlobClient\n */\n\nvar BlobClient =\n/** @class */\nfunction (_super) {\n  __extends(BlobClient, _super);\n\n  function BlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {\n    var _a;\n\n    var _this = this;\n\n    options = options || {};\n    var pipeline;\n    var url;\n\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      options = blobNameOrOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== \"string\") {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === \"string\" && blobNameOrOptions && typeof blobNameOrOptions === \"string\") {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      var containerName = credentialOrPipelineOrContainerName;\n      var blobName = blobNameOrOptions;\n      var extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n          url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n\n    _this = _super.call(this, url, pipeline) || this;\n    _a = _this.getBlobAndContainerNamesFromUrl(), _this._name = _a.blobName, _this._containerName = _a.containerName;\n    _this.blobContext = new StorageBlob(_this.storageClientContext);\n    return _this;\n  }\n\n  Object.defineProperty(BlobClient.prototype, \"name\", {\n    /**\n     * The name of the blob.\n     */\n    get: function get() {\n      return this._name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BlobClient.prototype, \"containerName\", {\n    /**\n     * The name of the storage container the blob is associated with.\n     */\n    get: function get() {\n      return this._containerName;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {BlobClient} A new BlobClient object identical to the source but with the specified snapshot timestamp\n   * @memberof BlobClient\n   */\n\n  BlobClient.prototype.withSnapshot = function (snapshot) {\n    return new BlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n  };\n  /**\n   * Creates a AppendBlobClient object.\n   *\n   * @returns {AppendBlobClient}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.getAppendBlobClient = function () {\n    return new AppendBlobClient(this.url, this.pipeline);\n  };\n  /**\n   * Creates a BlockBlobClient object.\n   *\n   * @returns {BlockBlobClient}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.getBlockBlobClient = function () {\n    return new BlockBlobClient(this.url, this.pipeline);\n  };\n  /**\n   * Creates a PageBlobClient object.\n   *\n   * @returns {PageBlobClient}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.getPageBlobClient = function () {\n    return new PageBlobClient(this.url, this.pipeline);\n  };\n  /**\n   * Reads or downloads a blob from the system, including its metadata and properties.\n   * You can also call Get Blob to read a snapshot.\n   *\n   * * In Node.js, data returns in a Readable stream readableStreamBody\n   * * In browsers, data returns in a promise blobBody\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\n   *\n   * @param {number} [offset] From which position of the blob to download, >= 0\n   * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined\n   * @param {BlobDownloadOptions} [options] Optional options to Blob Download operation.\n   * @returns {Promise<BlobDownloadResponseModel>}\n   * @memberof BlobClient\n   *\n   * Example usage (Node.js):\n   *\n   * ```js\n   * // Download and convert a blob to a string\n   * const downloadBlockBlobResponse = await blobClient.download();\n   * const downloaded = await streamToString(downloadBlockBlobResponse.readableStreamBody);\n   * console.log(\"Downloaded blob content:\", downloaded);\n   *\n   * async function streamToString(readableStream) {\n   *   return new Promise((resolve, reject) => {\n   *     const chunks = [];\n   *     readableStream.on(\"data\", (data) => {\n   *       chunks.push(data.toString());\n   *     });\n   *     readableStream.on(\"end\", () => {\n   *       resolve(chunks.join(\"\"));\n   *     });\n   *     readableStream.on(\"error\", reject);\n   *   });\n   * }\n   * ```\n   *\n   * Example usage (browser):\n   *\n   * ```js\n   * // Download and convert a blob to a string\n   * const downloadBlockBlobResponse = await blobClient.download();\n   * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);\n   * console.log(\n   *   \"Downloaded blob content\",\n   *   downloaded\n   * );\n   *\n   * async function blobToString(blob: Blob): Promise<string> {\n   *   const fileReader = new FileReader();\n   *   return new Promise<string>((resolve, reject) => {\n   *     fileReader.onloadend = (ev: any) => {\n   *       resolve(ev.target!.result);\n   *     };\n   *     fileReader.onerror = reject;\n   *     fileReader.readAsText(blob);\n   *   });\n   * }\n   * ```\n   */\n\n\n  BlobClient.prototype.download = function (offset, count, options) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, res_1, e_1;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            options.conditions = options.conditions || {};\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            _a = createSpan(\"BlobClient-download\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.download({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              onDownloadProgress: isNode ? undefined : options.onProgress,\n              range: offset === 0 && !count ? undefined : rangeToString({\n                offset: offset,\n                count: count\n              }),\n              rangeGetContentMD5: options.rangeGetContentMD5,\n              rangeGetContentCRC64: options.rangeGetContentCrc64,\n              snapshot: options.snapshot,\n              cpkInfo: options.customerProvidedKey,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            res_1 = _b.sent(); // Return browser response immediately\n\n            if (!isNode) {\n              return [2\n              /*return*/\n              , res_1];\n            } // We support retrying when download stream unexpected ends in Node.js runtime\n            // Following code shouldn't be bundled into browser build, however some\n            // bundlers may try to bundle following code and \"FileReadResponse.ts\".\n            // In this case, \"FileDownloadResponse.browser.ts\" will be used as a shim of \"FileDownloadResponse.ts\"\n            // The config is in package.json \"browser\" field\n\n\n            if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {\n              // TODO: Default value or make it a required parameter?\n              options.maxRetryRequests = DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;\n            }\n\n            if (res_1.contentLength === undefined) {\n              throw new RangeError(\"File download response doesn't contain valid content length header\");\n            }\n\n            if (!res_1.etag) {\n              throw new RangeError(\"File download response doesn't contain valid etag header\");\n            }\n\n            return [2\n            /*return*/\n            , new BlobDownloadResponse(res_1, function (start) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var updatedOptions;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      updatedOptions = {\n                        leaseAccessConditions: options.conditions,\n                        modifiedAccessConditions: {\n                          ifMatch: options.conditions.ifMatch || res_1.etag,\n                          ifModifiedSince: options.conditions.ifModifiedSince,\n                          ifNoneMatch: options.conditions.ifNoneMatch,\n                          ifUnmodifiedSince: options.conditions.ifUnmodifiedSince\n                        },\n                        range: rangeToString({\n                          count: offset + res_1.contentLength - start,\n                          offset: start\n                        }),\n                        rangeGetContentMD5: options.rangeGetContentMD5,\n                        rangeGetContentCRC64: options.rangeGetContentCrc64,\n                        snapshot: options.snapshot,\n                        cpkInfo: options.customerProvidedKey\n                      };\n                      return [4\n                      /*yield*/\n                      , this.blobContext.download(__assign({\n                        abortSignal: options.abortSignal\n                      }, updatedOptions))];\n\n                    case 1:\n                      // Debug purpose only\n                      // console.log(\n                      //   `Read from internal stream, range: ${\n                      //     updatedOptions.range\n                      //   }, options: ${JSON.stringify(updatedOptions)}`\n                      // );\n                      return [2\n                      /*return*/\n                      , _a.sent().readableStreamBody];\n                  }\n                });\n              });\n            }, offset, res_1.contentLength, {\n              abortSignal: options.abortSignal,\n              maxRetryRequests: options.maxRetryRequests,\n              onProgress: options.onProgress\n            })];\n\n          case 3:\n            e_1 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_1.message\n            });\n            throw e_1;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns true if the Azrue blob resource represented by this client exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing blob might be deleted by other clients or\n   * applications. Vice versa new blobs might be added by other clients or applications after this\n   * function completes.\n   *\n   * @param {BlobExistsOptions} [options] options to Exists operation.\n   * @returns {Promise<boolean>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.exists = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-exists\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.getProperties({\n              abortSignal: options.abortSignal,\n              customerProvidedKey: options.customerProvidedKey,\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            })];\n\n          case 2:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 3:\n            e_2 = _b.sent();\n\n            if (e_2.statusCode === 404) {\n              span.setStatus({\n                code: CanonicalCode.NOT_FOUND,\n                message: \"Expected exception when checking blob existence\"\n              });\n              return [2\n              /*return*/\n              , false];\n            }\n\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_2.message\n            });\n            throw e_2;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns all user-defined metadata, standard HTTP properties, and system properties\n   * for the blob. It does not return the content of the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @param {BlobGetPropertiesOptions} [options] Optional options to Get Properties operation.\n   * @returns {Promise<BlobGetPropertiesResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.getProperties = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_3;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-getProperties\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            options.conditions = options.conditions || {};\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blobContext.getProperties({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              cpkInfo: options.customerProvidedKey,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_3 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_3.message\n            });\n            throw e_3;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Marks the specified blob or snapshot for deletion. The blob is later deleted\n   * during garbage collection. Note that in order to delete a blob, you must delete\n   * all of its snapshots. You can delete both at the same time with the Delete\n   * Blob operation.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n   *\n   * @param {BlobDeleteOptions} [options] Optional options to Blob Delete operation.\n   * @returns {Promise<BlobDeleteResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype[\"delete\"] = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_4;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-delete\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            options.conditions = options.conditions || {};\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.deleteMethod({\n              abortSignal: options.abortSignal,\n              deleteSnapshots: options.deleteSnapshots,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_4 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_4.message\n            });\n            throw e_4;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Restores the contents and metadata of soft deleted blob and any associated\n   * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29\n   * or later.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n   *\n   * @param {BlobUndeleteOptions} [options] Optional options to Blob Undelete operation.\n   * @returns {Promise<BlobUndeleteResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.undelete = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_5;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-undelete\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.undelete({\n              abortSignal: options.abortSignal,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_5 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_5.message\n            });\n            throw e_5;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets system properties on the blob.\n   *\n   * If no value provided, or no value provided for the specificed blob HTTP headers,\n   * these blob HTTP headers without a value will be cleared.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param {BlobHTTPHeaders} [blobHTTPHeaders] If no value provided, or no value provided for\n   *                                                   the specificed blob HTTP headers, these blob HTTP\n   *                                                   headers without a value will be cleared.\n   * @param {BlobSetHTTPHeadersOptions} [options] Optional options to Blob Set HTTP Headers operation.\n   * @returns {Promise<BlobSetHTTPHeadersResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.setHTTPHeaders = function (blobHTTPHeaders, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_6;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-setHTTPHeaders\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            options.conditions = options.conditions || {};\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blobContext.setHTTPHeaders({\n              abortSignal: options.abortSignal,\n              blobHTTPHeaders: blobHTTPHeaders,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              cpkInfo: options.customerProvidedKey,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_6 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_6.message\n            });\n            throw e_6;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets user-defined metadata for the specified blob as one or more name-value pairs.\n   *\n   * If no option provided, or no metadata defined in the parameter, the blob\n   * metadata will be removed.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata\n   *\n   * @param {Metadata} [metadata] Replace existing metadata with this value.\n   *                               If no value provided the existing metadata will be removed.\n   * @param {BlobSetMetadataOptions} [options] Optional options to Set Metadata operation.\n   * @returns {Promise<BlobSetMetadataResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.setMetadata = function (metadata, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_7;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-setMetadata\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            options.conditions = options.conditions || {};\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blobContext.setMetadata({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              metadata: metadata,\n              modifiedAccessConditions: options.conditions,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_7 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_7.message\n            });\n            throw e_7;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Get a {@link BlobLeaseClient} that manages leases on the blob.\n   *\n   * @param {string} [proposeLeaseId] Initial proposed lease Id.\n   * @returns {BlobLeaseClient} A new BlobLeaseClient object for managing leases on the blob.\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.getBlobLeaseClient = function (proposeLeaseId) {\n    return new BlobLeaseClient(this, proposeLeaseId);\n  };\n  /**\n   * Creates a read-only snapshot of a blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob\n   *\n   * @param {BlobCreateSnapshotOptions} [options] Optional options to the Blob Create Snapshot operation.\n   * @returns {Promise<BlobCreateSnapshotResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.createSnapshot = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_8;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-createSnapshot\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            options.conditions = options.conditions || {};\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blobContext.createSnapshot({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: options.conditions,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_8 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_8.message\n            });\n            throw e_8;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Asynchronously copies a blob to a destination within the storage account.\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the copy is completed.\n   * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n   * a committed blob in any Azure storage account.\n   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n   * an Azure file in any Azure storage account.\n   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n   * operation to copy from another storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n   *\n   * Example using automatic polling:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url');\n   * const result = await copyPoller.pollUntilDone();\n   * ```\n   *\n   * Example using manual polling:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url');\n   * while (!poller.isDone()) {\n   *    await poller.poll();\n   * }\n   * const result = copyPoller.getResult();\n   * ```\n   *\n   * Example using progress updates:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url', {\n   *   onProgress(state) {\n   *     console.log(`Progress: ${state.copyProgress}`);\n   *   }\n   * });\n   * const result = await copyPoller.pollUntilDone();\n   * ```\n   *\n   * Example using a changing polling interval (default 15 seconds):\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url', {\n   *   intervalInMs: 1000 // poll blob every 1 second for copy progress\n   * });\n   * const result = await copyPoller.pollUntilDone();\n   * ```\n   *\n   * Example using copy cancellation:\n   *\n   * ```js\n   * const copyPoller = await blobClient.beginCopyFromURL('url');\n   * // cancel operation after starting it.\n   * try {\n   *   await copyPoller.cancelOperation();\n   *   // calls to get the result now throw PollerCancelledError\n   *   await copyPoller.getResult();\n   * } catch (err) {\n   *   if (err.name === 'PollerCancelledError') {\n   *     console.log('The copy was cancelled.');\n   *   }\n   * }\n   * ```\n   *\n   * @param {string} copySource url to the source Azure Blob/File.\n   * @param {BlobBeginCopyFromURLOptions} [options] Optional options to the Blob Start Copy From URL operation.\n   */\n\n\n  BlobClient.prototype.beginCopyFromURL = function (copySource, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var client, poller;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            client = {\n              abortCopyFromURL: function abortCopyFromURL() {\n                var args = [];\n\n                for (var _i = 0; _i < arguments.length; _i++) {\n                  args[_i] = arguments[_i];\n                }\n\n                return _this.abortCopyFromURL.apply(_this, args);\n              },\n              getProperties: function getProperties() {\n                var args = [];\n\n                for (var _i = 0; _i < arguments.length; _i++) {\n                  args[_i] = arguments[_i];\n                }\n\n                return _this.getProperties.apply(_this, args);\n              },\n              startCopyFromURL: function startCopyFromURL() {\n                var args = [];\n\n                for (var _i = 0; _i < arguments.length; _i++) {\n                  args[_i] = arguments[_i];\n                }\n\n                return _this.startCopyFromURL.apply(_this, args);\n              }\n            };\n            poller = new BlobBeginCopyFromUrlPoller({\n              blobClient: client,\n              copySource: copySource,\n              intervalInMs: options.intervalInMs,\n              onProgress: options.onProgress,\n              resumeFrom: options.resumeFrom,\n              startCopyFromURLOptions: options\n            }); // Trigger the startCopyFromURL call by calling poll.\n            // Any errors from this method should be surfaced to the user.\n\n            return [4\n            /*yield*/\n            , poller.poll()];\n\n          case 1:\n            // Trigger the startCopyFromURL call by calling poll.\n            // Any errors from this method should be surfaced to the user.\n            _a.sent();\n\n            return [2\n            /*return*/\n            , poller];\n        }\n      });\n    });\n  };\n  /**\n   * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero\n   * length and full metadata. Version 2012-02-12 and newer.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob\n   *\n   * @param {string} copyId Id of the Copy From URL operation.\n   * @param {BlobAbortCopyFromURLOptions} [options] Optional options to the Blob Abort Copy From URL operation.\n   * @returns {Promise<BlobAbortCopyFromURLResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.abortCopyFromURL = function (copyId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_9;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-abortCopyFromURL\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.abortCopyFromURL(copyId, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_9 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_9.message\n            });\n            throw e_9;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not\n   * return a response until the copy is complete.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url\n   *\n   * @param {string} copySource The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication\n   * @param {BlobSyncCopyFromURLOptions} [options={}]\n   * @returns {Promise<BlobCopyFromURLResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.syncCopyFromURL = function (copySource, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_10;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-syncCopyFromURL\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.copyFromURL(copySource, {\n              abortSignal: options.abortSignal,\n              metadata: options.metadata,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              sourceModifiedAccessConditions: {\n                sourceIfMatch: options.sourceConditions.ifMatch,\n                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince\n              },\n              sourceContentMD5: options.sourceContentMD5,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_10 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_10.message\n            });\n            throw e_10;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets the tier on a blob. The operation is allowed on a page blob in a premium\n   * storage account and on a block blob in a blob storage account (locally redundant\n   * storage only). A premium page blob's tier determines the allowed size, IOPS,\n   * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n   * storage type. This operation does not update the blob's ETag.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier\n   *\n   * @param {BlockBlobTier | PremiumPageBlobTier | string} tier The tier to be set on the blob. Valid values are Hot, Cool, or Archive.\n   * @param {BlobSetTierOptions} [options] Optional options to the Blob Set Tier operation.\n   * @returns {Promise<BlobsSetTierResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.setAccessTier = function (tier, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_11;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-setAccessTier\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.setTier(toAccessTier(tier), {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              rehydratePriority: options.rehydratePriority,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_11 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_11.message\n            });\n            throw e_11;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  BlobClient.prototype.downloadToBuffer = function (param1, param2, param3, param4) {\n    if (param4 === void 0) {\n      param4 = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var buffer, offset, count, options, _a, span, spanOptions, response, transferProgress_1, batch, _loop_1, off, e_12;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            offset = 0;\n            count = 0;\n            options = param4;\n\n            if (param1 instanceof Buffer) {\n              buffer = param1;\n              offset = param2 || 0;\n              count = typeof param3 === \"number\" ? param3 : 0;\n            } else {\n              offset = typeof param1 === \"number\" ? param1 : 0;\n              count = typeof param2 === \"number\" ? param2 : 0;\n              options = param3 || {};\n            }\n\n            _a = createSpan(\"BlobClient-downloadToBuffer\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 5, 6, 7]);\n\n            if (!options.blockSize) {\n              options.blockSize = 0;\n            }\n\n            if (options.blockSize < 0) {\n              throw new RangeError(\"blockSize option must be >= 0\");\n            }\n\n            if (options.blockSize === 0) {\n              options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n            }\n\n            if (offset < 0) {\n              throw new RangeError(\"offset option must be >= 0\");\n            }\n\n            if (count && count <= 0) {\n              throw new RangeError(\"count option must be > 0\");\n            }\n\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            if (!!count) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.getProperties(__assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            response = _b.sent();\n            count = response.contentLength - offset;\n\n            if (count < 0) {\n              throw new RangeError(\"offset \" + offset + \" shouldn't be larger than blob size \" + response.contentLength);\n            }\n\n            _b.label = 3;\n\n          case 3:\n            // Allocate the buffer of size = count if the buffer is not provided\n            if (!buffer) {\n              try {\n                buffer = Buffer.alloc(count);\n              } catch (error) {\n                throw new Error(\"Unable to allocate the buffer of size: \" + count + \"(in bytes). Please try passing your own buffer to the \\\"downloadToBuffer\\\" method or try using other methods like \\\"download\\\" or \\\"downloadToFile\\\".\\t \" + error.message);\n              }\n            }\n\n            if (buffer.length < count) {\n              throw new RangeError(\"The buffer's size should be equal to or larger than the request count of bytes: \" + count);\n            }\n\n            transferProgress_1 = 0;\n            batch = new Batch(options.concurrency);\n\n            _loop_1 = function _loop_1(off) {\n              batch.addOperation(function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var chunkEnd, response, stream;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        chunkEnd = offset + count;\n\n                        if (off + options.blockSize < chunkEnd) {\n                          chunkEnd = off + options.blockSize;\n                        }\n\n                        return [4\n                        /*yield*/\n                        , this.download(off, chunkEnd - off, {\n                          abortSignal: options.abortSignal,\n                          conditions: options.conditions,\n                          maxRetryRequests: options.maxRetryRequestsPerBlock,\n                          tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                            spanOptions: spanOptions\n                          })\n                        })];\n\n                      case 1:\n                        response = _a.sent();\n                        stream = response.readableStreamBody;\n                        return [4\n                        /*yield*/\n                        , streamToBuffer(stream, buffer, off - offset, chunkEnd - offset)];\n\n                      case 2:\n                        _a.sent(); // Update progress after block is downloaded, in case of block trying\n                        // Could provide finer grained progress updating inside HTTP requests,\n                        // only if convenience layer download try is enabled\n\n\n                        transferProgress_1 += chunkEnd - off;\n\n                        if (options.onProgress) {\n                          options.onProgress({\n                            loadedBytes: transferProgress_1\n                          });\n                        }\n\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              });\n            };\n\n            for (off = offset; off < offset + count; off = off + options.blockSize) {\n              _loop_1(off);\n            }\n\n            return [4\n            /*yield*/\n            , batch[\"do\"]()];\n\n          case 4:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , buffer];\n\n          case 5:\n            e_12 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_12.message\n            });\n            throw e_12;\n\n          case 6:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Downloads an Azure Blob to a local file.\n   * Fails if the the given file path already exits.\n   * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.\n   *\n   * @param {string} filePath\n   * @param {number} [offset] From which position of the block blob to download.\n   * @param {number} [count] How much data to be downloaded. Will download to the end when passing undefined.\n   * @param {BlobDownloadOptions} [options] Options to Blob download options.\n   * @returns {Promise<BlobDownloadResponseModel>} The response data for blob download operation,\n   *                                                 but with readableStreamBody set to undefined since its\n   *                                                 content is already read and written into a local file\n   *                                                 at the specified path.\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.downloadToFile = function (filePath, offset, count, options) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, response, e_13;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-downloadToFile\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 5, 6, 7]);\n\n            return [4\n            /*yield*/\n            , this.download(offset, count, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            response = _b.sent();\n            if (!response.readableStreamBody) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , readStreamToLocalFile(response.readableStreamBody, filePath)];\n\n          case 3:\n            _b.sent();\n\n            _b.label = 4;\n\n          case 4:\n            // The stream is no longer accessible so setting it to undefined.\n            response.blobDownloadStream = undefined;\n            return [2\n            /*return*/\n            , response];\n\n          case 5:\n            e_13 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_13.message\n            });\n            throw e_13;\n\n          case 6:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  BlobClient.prototype.getBlobAndContainerNamesFromUrl = function () {\n    var containerName;\n    var blobName;\n\n    try {\n      //  URL may look like the following\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt\";\n      // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`\n      // http://localhost:10001/devstoreaccount1/containername/blob\n      var parsedUrl = URLBuilder.parse(this.url);\n\n      if (parsedUrl.getHost().split(\".\")[1] === \"blob\") {\n        // \"https://myaccount.blob.core.windows.net/containername/blob\".\n        // .getPath() -> /containername/blob\n        var pathComponents = parsedUrl.getPath().match(\"/([^/]*)(/(.*))?\");\n        containerName = pathComponents[1];\n        blobName = pathComponents[3];\n      } else {\n        // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob\n        // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob\n        // .getPath() -> /devstoreaccount1/containername/blob\n        var pathComponents = parsedUrl.getPath().match(\"/([^/]*)/([^/]*)(/(.*))?\");\n        containerName = pathComponents[2];\n        blobName = pathComponents[4];\n      } // decode the encoded blobName, containerName - to get all the special characters that might be present in them\n\n\n      containerName = decodeURIComponent(containerName);\n      blobName = decodeURIComponent(blobName); // Azure Storage Server will replace \"\\\" with \"/\" in the blob names\n      //   doing the same in the SDK side so that the user doesn't have to replace \"\\\" instances in the blobName\n\n      blobName = blobName.replace(/\\\\/g, \"/\");\n\n      if (!blobName) {\n        throw new Error(\"Provided blobName is invalid.\");\n      } else if (!containerName) {\n        throw new Error(\"Provided containerName is invalid.\");\n      }\n\n      return {\n        blobName: blobName,\n        containerName: containerName\n      };\n    } catch (error) {\n      throw new Error(\"Unable to extract blobName and containerName with provided information.\");\n    }\n  };\n  /**\n   * Asynchronously copies a blob to a destination within the storage account.\n   * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n   * a committed blob in any Azure storage account.\n   * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n   * an Azure file in any Azure storage account.\n   * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n   * operation to copy from another storage account.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n   *\n   * @param {string} copySource url to the source Azure Blob/File.\n   * @param {BlobStartCopyFromURLOptions} [options] Optional options to the Blob Start Copy From URL operation.\n   * @returns {Promise<BlobStartCopyFromURLResponse>}\n   * @memberof BlobClient\n   */\n\n\n  BlobClient.prototype.startCopyFromURL = function (copySource, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_14;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobClient-startCopyFromURL\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blobContext.startCopyFromURL(copySource, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: options.conditions,\n              sourceModifiedAccessConditions: {\n                sourceIfMatch: options.sourceConditions.ifMatch,\n                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince\n              },\n              rehydratePriority: options.rehydratePriority,\n              tier: toAccessTier(options.tier),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_14 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_14.message\n            });\n            throw e_14;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return BlobClient;\n}(StorageClient);\n\nexport { BlobClient };\n/**\n * AppendBlobClient defines a set of operations applicable to append blobs.\n *\n * @export\n * @class AppendBlobClient\n * @extends {BlobClient}\n */\n\nvar AppendBlobClient =\n/** @class */\nfunction (_super) {\n  __extends(AppendBlobClient, _super);\n\n  function AppendBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {\n    var _this = this; // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n\n\n    var pipeline;\n    var url;\n    options = options || {};\n\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;\n      url = urlOrConnectionString;\n      options = blobNameOrOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== \"string\") {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString; // The second parameter is undefined. Use anonymous credential.\n\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === \"string\" && blobNameOrOptions && typeof blobNameOrOptions === \"string\") {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      var containerName = credentialOrPipelineOrContainerName;\n      var blobName = blobNameOrOptions;\n      var extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n          url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n\n    _this = _super.call(this, url, pipeline) || this;\n    _this.appendBlobContext = new AppendBlob(_this.storageClientContext);\n    return _this;\n  }\n  /**\n   * Creates a new AppendBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {AppendBlobClient} A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.\n   * @memberof AppendBlobClient\n   */\n\n\n  AppendBlobClient.prototype.withSnapshot = function (snapshot) {\n    return new AppendBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n  };\n  /**\n   * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {AppendBlobCreateOptions} [options] Options to the Append Block Create operation.\n   * @returns {Promise<AppendBlobCreateResponse>}\n   * @memberof AppendBlobClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const appendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n   * await appendBlobClient.create();\n   * ```\n   */\n\n\n  AppendBlobClient.prototype.create = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_15;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"AppendBlobClient-create\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            options.conditions = options.conditions || {};\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.appendBlobContext.create(0, {\n              abortSignal: options.abortSignal,\n              blobHTTPHeaders: options.blobHTTPHeaders,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: options.conditions,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_15 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_15.message\n            });\n            throw e_15;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Commits a new block of data to the end of the existing append blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/append-block\n   *\n   * @param {HttpRequestBody} body Data to be appended.\n   * @param {number} contentLength Length of the body in bytes.\n   * @param {AppendBlobAppendBlockOptions} [options] Options to the Append Block operation.\n   * @returns {Promise<AppendBlobAppendBlockResponse>}\n   * @memberof AppendBlobClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const content = \"Hello World!\";\n   *\n   * // Create a new append blob and append data to the blob.\n   * const newAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n   * await newAppendBlobClient.create();\n   * await newAppendBlobClient.appendBlock(content, content.length);\n   *\n   * // Append data to an existing append blob.\n   * const existingAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n   * await existingAppendBlobClient.appendBlock(content, content.length);\n   * ```\n   */\n\n\n  AppendBlobClient.prototype.appendBlock = function (body, contentLength, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_16;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"AppendBlobClient-appendBlock\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            options.conditions = options.conditions || {};\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.appendBlobContext.appendBlock(body, contentLength, {\n              abortSignal: options.abortSignal,\n              appendPositionAccessConditions: options.conditions,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              onUploadProgress: options.onProgress,\n              transactionalContentMD5: options.transactionalContentMD5,\n              transactionalContentCrc64: options.transactionalContentCrc64,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_16 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_16.message\n            });\n            throw e_16;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * The Append Block operation commits a new block of data to the end of an existing append blob\n   * where the contents are read from a source url.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url\n   *\n   * @param {string} sourceURL\n   *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can\n   *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n   *                 must either be public or must be authenticated via a shared access signature. If the source blob is\n   *                 public, no authentication is required to perform the operation.\n   * @param {number} sourceOffset Offset in source to be appended\n   * @param {number} count Number of bytes to be appended as a block\n   * @param {AppendBlobAppendBlockFromURLOptions} [options={}]\n   * @returns {Promise<AppendBlobAppendBlockFromUrlResponse>}\n   * @memberof AppendBlobClient\n   */\n\n\n  AppendBlobClient.prototype.appendBlockFromURL = function (sourceURL, sourceOffset, count, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_17;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"AppendBlobClient-appendBlockFromURL\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {\n              abortSignal: options.abortSignal,\n              sourceRange: rangeToString({\n                offset: sourceOffset,\n                count: count\n              }),\n              sourceContentMD5: options.sourceContentMD5,\n              sourceContentCrc64: options.sourceContentCrc64,\n              leaseAccessConditions: options.conditions,\n              appendPositionAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              sourceModifiedAccessConditions: {\n                sourceIfMatch: options.sourceConditions.ifMatch,\n                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince\n              },\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_17 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_17.message\n            });\n            throw e_17;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return AppendBlobClient;\n}(BlobClient);\n\nexport { AppendBlobClient };\n/**\n * BlockBlobClient defines a set of operations applicable to block blobs.\n *\n * @export\n * @class BlockBlobClient\n * @extends {BlobClient}\n */\n\nvar BlockBlobClient =\n/** @class */\nfunction (_super) {\n  __extends(BlockBlobClient, _super);\n\n  function BlockBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {\n    var _this = this; // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n\n\n    var pipeline;\n    var url;\n    options = options || {};\n\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      options = blobNameOrOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== \"string\") {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === \"string\" && blobNameOrOptions && typeof blobNameOrOptions === \"string\") {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      var containerName = credentialOrPipelineOrContainerName;\n      var blobName = blobNameOrOptions;\n      var extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n          url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n\n    _this = _super.call(this, url, pipeline) || this;\n    _this.blockBlobContext = new BlockBlob(_this.storageClientContext);\n    return _this;\n  }\n  /**\n   * Creates a new BlockBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a URL to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {BlockBlobClient} A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.withSnapshot = function (snapshot) {\n    return new BlockBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n  };\n  /**\n   * Creates a new block blob, or updates the content of an existing block blob.\n   * Updating an existing block blob overwrites any existing metadata on the blob.\n   * Partial updates are not supported; the content of the existing blob is\n   * overwritten with the new content. To perform a partial update of a block blob's,\n   * use {@link stageBlock} and {@link commitBlockList}.\n   *\n   * This is a non-parallel uploading method, please use {@link uploadFile},\n   * {@link uploadStream} or {@link uploadBrowserData} for better performance\n   * with concurrency uploading.\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {HttpRequestBody} body Blob, string, ArrayBuffer, ArrayBufferView or a function\n   *                               which returns a new Readable stream whose offset is from data source beginning.\n   * @param {number} contentLength Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n   *                               string including non non-Base64/Hex-encoded characters.\n   * @param {BlockBlobUploadOptions} [options] Options to the Block Blob Upload operation.\n   * @returns {Promise<BlockBlobUploadResponse>} Response data for the Block Blob Upload operation.\n   * @memberof BlockBlobClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const content = \"Hello world!\";\n   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n   * ```\n   */\n\n\n  BlockBlobClient.prototype.upload = function (body, contentLength, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_18;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"BlockBlobClient-upload\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blockBlobContext.upload(body, contentLength, {\n              abortSignal: options.abortSignal,\n              blobHTTPHeaders: options.blobHTTPHeaders,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: options.conditions,\n              onUploadProgress: options.onProgress,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              tier: toAccessTier(options.tier),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_18 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_18.message\n            });\n            throw e_18;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Uploads the specified block to the block blob's \"staging area\" to be later\n   * committed by a call to commitBlockList.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-block\n   *\n   * @param {string} blockId A 64-byte value that is base64-encoded\n   * @param {HttpRequestBody} body Data to upload to the staging area.\n   * @param {number} contentLength Number of bytes to upload.\n   * @param {BlockBlobStageBlockOptions} [options] Options to the Block Blob Stage Block operation.\n   * @returns {Promise<BlockBlobStageBlockResponse>} Response data for the Block Blob Stage Block operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.stageBlock = function (blockId, body, contentLength, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_19;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlockBlobClient-stageBlock\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blockBlobContext.stageBlock(blockId, contentLength, body, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              onUploadProgress: options.onProgress,\n              transactionalContentMD5: options.transactionalContentMD5,\n              transactionalContentCrc64: options.transactionalContentCrc64,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_19 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_19.message\n            });\n            throw e_19;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * The Stage Block From URL operation creates a new block to be committed as part\n   * of a blob where the contents are read from a URL.\n   * This API is available starting in version 2018-03-28.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url\n   *\n   * @param {string} blockId A 64-byte value that is base64-encoded\n   * @param {string} sourceURL Specifies the URL of the blob. The value\n   *                           may be a URL of up to 2 KB in length that specifies a blob.\n   *                           The value should be URL-encoded as it would appear\n   *                           in a request URI. The source blob must either be public\n   *                           or must be authenticated via a shared access signature.\n   *                           If the source blob is public, no authentication is required\n   *                           to perform the operation. Here are some examples of source object URLs:\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n   *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param {number} [offset] From which position of the blob to download, >= 0\n   * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined\n   * @param {BlockBlobStageBlockFromURLOptions} [options={}] Options to the Block Blob Stage Block From URL operation.\n   * @returns {Promise<BlockBlobStageBlockFromURLResponse>} Response data for the Block Blob Stage Block From URL operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.stageBlockFromURL = function (blockId, sourceURL, offset, count, options) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_20;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlockBlobClient-stageBlockFromURL\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              sourceContentMD5: options.sourceContentMD5,\n              sourceContentCrc64: options.sourceContentCrc64,\n              sourceRange: offset === 0 && !count ? undefined : rangeToString({\n                offset: offset,\n                count: count\n              }),\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_20 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_20.message\n            });\n            throw e_20;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Writes a blob by specifying the list of block IDs that make up the blob.\n   * In order to be written as part of a blob, a block must have been successfully written\n   * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to\n   * update a blob by uploading only those blocks that have changed, then committing the new and existing\n   * blocks together. Any blocks not specified in the block list and permanently deleted.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list\n   *\n   * @param {string[]} blocks  Array of 64-byte value that is base64-encoded\n   * @param {BlockBlobCommitBlockListOptions} [options] Options to the Block Blob Commit Block List operation.\n   * @returns {Promise<BlockBlobCommitBlockListResponse>} Response data for the Block Blob Commit Block List operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.commitBlockList = function (blocks, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_21;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"BlockBlobClient-commitBlockList\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.blockBlobContext.commitBlockList({\n              latest: blocks\n            }, {\n              abortSignal: options.abortSignal,\n              blobHTTPHeaders: options.blobHTTPHeaders,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: options.conditions,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              tier: toAccessTier(options.tier),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_21 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_21.message\n            });\n            throw e_21;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the list of blocks that have been uploaded as part of a block blob\n   * using the specified block list filter.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list\n   *\n   * @param {BlockListType} listType Specifies whether to return the list of committed blocks,\n   *                                        the list of uncommitted blocks, or both lists together.\n   * @param {BlockBlobGetBlockListOptions} [options] Options to the Block Blob Get Block List operation.\n   * @returns {Promise<BlockBlobGetBlockListResponse>} Response data for the Block Blob Get Block List operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.getBlockList = function (listType, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, res, e_22;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlockBlobClient-getBlockList\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.blockBlobContext.getBlockList(listType, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            res = _b.sent();\n\n            if (!res.committedBlocks) {\n              res.committedBlocks = [];\n            }\n\n            if (!res.uncommittedBlocks) {\n              res.uncommittedBlocks = [];\n            }\n\n            return [2\n            /*return*/\n            , res];\n\n          case 3:\n            e_22 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_22.message\n            });\n            throw e_22;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // High level functions\n\n  /**\n   * ONLY AVAILABLE IN BROWSERS.\n   *\n   * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.\n   *\n   * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call\n   * {@link commitBlockList} to commit the block list.\n   *\n   * @export\n   * @param {Blob | ArrayBuffer | ArrayBufferView} browserData Blob, File, ArrayBuffer or ArrayBufferView\n   * @param {BlockBlobParallelUploadOptions} [options] Options to upload browser data.\n   * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.uploadBrowserData = function (browserData, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, browserBlob_1, e_23;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlockBlobClient-uploadBrowserData\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            browserBlob_1 = new Blob([browserData]);\n            return [4\n            /*yield*/\n            , this.uploadSeekableBlob(function (offset, size) {\n              return browserBlob_1.slice(offset, offset + size);\n            }, browserBlob_1.size, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_23 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_23.message\n            });\n            throw e_23;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * ONLY AVAILABLE IN BROWSERS.\n   *\n   * Uploads a browser {@link Blob} object to block blob. Requires a blobFactory as the data source,\n   * which need to return a {@link Blob} object with the offset and size provided.\n   *\n   * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n   * to commit the block list.\n   *\n   * @param {(offset: number, size: number) => Blob} blobFactory\n   * @param {number} size size of the data to upload.\n   * @param {BlockBlobParallelUploadOptions} [options] Options to Upload to Block Blob operation.\n   * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.uploadSeekableBlob = function (blobFactory, size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, numBlocks_1, blockList_1, blockIDPrefix_1, transferProgress_2, batch, _loop_2, i, e_24;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.blockSize) {\n              options.blockSize = 0;\n            }\n\n            if (options.blockSize < 0 || options.blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n              throw new RangeError(\"blockSize option must be >= 0 and <= \" + BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES);\n            }\n\n            if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {\n              options.maxSingleShotSize = BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n            }\n\n            if (options.maxSingleShotSize < 0 || options.maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {\n              throw new RangeError(\"maxSingleShotSize option must be >= 0 and <= \" + BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES);\n            }\n\n            if (options.blockSize === 0) {\n              if (size > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(size + \" is too larger to upload to a block blob.\");\n              }\n\n              if (size > options.maxSingleShotSize) {\n                options.blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);\n\n                if (options.blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n                  options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n                }\n              }\n            }\n\n            if (!options.blobHTTPHeaders) {\n              options.blobHTTPHeaders = {};\n            }\n\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            _a = createSpan(\"BlockBlobClient-UploadSeekableBlob\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 5, 6, 7]);\n\n            if (!(size <= options.maxSingleShotSize)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.upload(blobFactory(0, size), size, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            numBlocks_1 = Math.floor((size - 1) / options.blockSize) + 1;\n\n            if (numBlocks_1 > BLOCK_BLOB_MAX_BLOCKS) {\n              throw new RangeError(\"The buffer's size is too big or the BlockSize is too small;\" + (\"the number of blocks must be <= \" + BLOCK_BLOB_MAX_BLOCKS));\n            }\n\n            blockList_1 = [];\n            blockIDPrefix_1 = generateUuid();\n            transferProgress_2 = 0;\n            batch = new Batch(options.concurrency);\n\n            _loop_2 = function _loop_2(i) {\n              batch.addOperation(function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var blockID, start, end, contentLength;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        blockID = generateBlockID(blockIDPrefix_1, i);\n                        start = options.blockSize * i;\n                        end = i === numBlocks_1 - 1 ? size : start + options.blockSize;\n                        contentLength = end - start;\n                        blockList_1.push(blockID);\n                        return [4\n                        /*yield*/\n                        , this.stageBlock(blockID, blobFactory(start, contentLength), contentLength, {\n                          abortSignal: options.abortSignal,\n                          conditions: options.conditions,\n                          encryptionScope: options.encryptionScope,\n                          tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                            spanOptions: spanOptions\n                          })\n                        })];\n\n                      case 1:\n                        _a.sent(); // Update progress after block is successfully uploaded to server, in case of block trying\n                        // TODO: Hook with convenience layer progress event in finer level\n\n\n                        transferProgress_2 += contentLength;\n\n                        if (options.onProgress) {\n                          options.onProgress({\n                            loadedBytes: transferProgress_2\n                          });\n                        }\n\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              });\n            };\n\n            for (i = 0; i < numBlocks_1; i++) {\n              _loop_2(i);\n            }\n\n            return [4\n            /*yield*/\n            , batch[\"do\"]()];\n\n          case 4:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , this.commitBlockList(blockList_1, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 5:\n            e_24 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_24.message\n            });\n            throw e_24;\n\n          case 6:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a local file in blocks to a block blob.\n   *\n   * When file size <= 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n   * to commit the block list.\n   *\n   * @param {string} filePath Full path of local file\n   * @param {BlockBlobParallelUploadOptions} [options] Options to Upload to Block Blob operation.\n   * @returns {(Promise<BlobUploadCommonResponse>)}  Response data for the Blob Upload operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.uploadFile = function (filePath, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, size, e_25;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlockBlobClient-uploadFile\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 4, 5, 6]);\n\n            return [4\n            /*yield*/\n            , fsStat(filePath)];\n\n          case 2:\n            size = _b.sent().size;\n            return [4\n            /*yield*/\n            , this.uploadResetableStream(function (offset, count) {\n              return fs.createReadStream(filePath, {\n                autoClose: true,\n                end: count ? offset + count - 1 : Infinity,\n                start: offset\n              });\n            }, size, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 3:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 4:\n            e_25 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_25.message\n            });\n            throw e_25;\n\n          case 5:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a Node.js Readable stream into block blob.\n   *\n   * PERFORMANCE IMPROVEMENT TIPS:\n   * * Input stream highWaterMark is better to set a same value with bufferSize\n   *    parameter, which will avoid Buffer.concat() operations.\n   *\n   * @param {Readable} stream Node.js Readable stream\n   * @param {number} bufferSize Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB\n   * @param {number} maxConcurrency  Max concurrency indicates the max number of buffers that can be allocated,\n   *                                 positive correlation with max uploading concurrency. Default value is 5\n   * @param {BlockBlobUploadStreamOptions} [options] Options to Upload Stream to Block Blob operation.\n   * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.uploadStream = function (stream, bufferSize, maxConcurrency, options) {\n    if (bufferSize === void 0) {\n      bufferSize = DEFAULT_BLOCK_BUFFER_SIZE_BYTES;\n    }\n\n    if (maxConcurrency === void 0) {\n      maxConcurrency = 5;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, blockNum_1, blockIDPrefix_2, transferProgress_3, blockList_2, scheduler, e_26;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.blobHTTPHeaders) {\n              options.blobHTTPHeaders = {};\n            }\n\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            _a = createSpan(\"BlockBlobClient-uploadStream\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 4, 5, 6]);\n\n            blockNum_1 = 0;\n            blockIDPrefix_2 = generateUuid();\n            transferProgress_3 = 0;\n            blockList_2 = [];\n            scheduler = new BufferScheduler(stream, bufferSize, maxConcurrency, function (buffer) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var blockID;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      blockID = generateBlockID(blockIDPrefix_2, blockNum_1);\n                      blockList_2.push(blockID);\n                      blockNum_1++;\n                      return [4\n                      /*yield*/\n                      , this.stageBlock(blockID, buffer, buffer.length, {\n                        conditions: options.conditions,\n                        encryptionScope: options.encryptionScope,\n                        tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                          spanOptions: spanOptions\n                        })\n                      })];\n\n                    case 1:\n                      _a.sent(); // Update progress after block is successfully uploaded to server, in case of block trying\n\n\n                      transferProgress_3 += buffer.length;\n\n                      if (options.onProgress) {\n                        options.onProgress({\n                          loadedBytes: transferProgress_3\n                        });\n                      }\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, // concurrency should set a smaller value than maxConcurrency, which is helpful to\n            // reduce the possibility when a outgoing handler waits for stream data, in\n            // this situation, outgoing handlers are blocked.\n            // Outgoing queue shouldn't be empty.\n            Math.ceil(maxConcurrency / 4 * 3));\n            return [4\n            /*yield*/\n            , scheduler[\"do\"]()];\n\n          case 2:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.commitBlockList(blockList_2, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 3:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 4:\n            e_26 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_26.message\n            });\n            throw e_26;\n\n          case 5:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Accepts a Node.js Readable stream factory, and uploads in blocks to a block blob.\n   * The Readable stream factory must returns a Node.js Readable stream starting from the offset defined. The offset\n   * is the offset in the block blob to be uploaded.\n   *\n   * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.\n   * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n   * to commit the block list.\n   *\n   * @export\n   * @param {(offset: number) => NodeJS.ReadableStream} streamFactory Returns a Node.js Readable stream starting\n   *                                                                  from the offset defined\n   * @param {number} size Size of the block blob\n   * @param {BlockBlobParallelUploadOptions} [options] Options to Upload to Block Blob operation.\n   * @returns {(Promise<BlobUploadCommonResponse>)}  Response data for the Blob Upload operation.\n   * @memberof BlockBlobClient\n   */\n\n\n  BlockBlobClient.prototype.uploadResetableStream = function (streamFactory, size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, numBlocks_2, blockList_3, blockIDPrefix_3, transferProgress_4, batch, _loop_3, i, e_27;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.blockSize) {\n              options.blockSize = 0;\n            }\n\n            if (options.blockSize < 0 || options.blockSize > BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n              throw new RangeError(\"blockSize option must be >= 0 and <= \" + BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES);\n            }\n\n            if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {\n              options.maxSingleShotSize = BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n            }\n\n            if (options.maxSingleShotSize < 0 || options.maxSingleShotSize > BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {\n              throw new RangeError(\"maxSingleShotSize option must be >= 0 and <= \" + BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES);\n            }\n\n            if (options.blockSize === 0) {\n              if (size > BLOCK_BLOB_MAX_BLOCKS * BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n                throw new RangeError(size + \" is too larger to upload to a block blob.\");\n              }\n\n              if (size > options.maxSingleShotSize) {\n                options.blockSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);\n\n                if (options.blockSize < DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n                  options.blockSize = DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n                }\n              }\n            }\n\n            if (!options.blobHTTPHeaders) {\n              options.blobHTTPHeaders = {};\n            }\n\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            _a = createSpan(\"BlockBlobClient-uploadResetableStream\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 6, 7, 8]);\n\n            if (!(size <= options.maxSingleShotSize)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.upload(function () {\n              return streamFactory(0);\n            }, size, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            numBlocks_2 = Math.floor((size - 1) / options.blockSize) + 1;\n\n            if (numBlocks_2 > BLOCK_BLOB_MAX_BLOCKS) {\n              throw new RangeError(\"The buffer's size is too big or the BlockSize is too small;\" + (\"the number of blocks must be <= \" + BLOCK_BLOB_MAX_BLOCKS));\n            }\n\n            blockList_3 = [];\n            blockIDPrefix_3 = generateUuid();\n            transferProgress_4 = 0;\n            batch = new Batch(options.concurrency);\n\n            _loop_3 = function _loop_3(i) {\n              batch.addOperation(function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var blockID, start, end, contentLength;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        blockID = generateBlockID(blockIDPrefix_3, i);\n                        start = options.blockSize * i;\n                        end = i === numBlocks_2 - 1 ? size : start + options.blockSize;\n                        contentLength = end - start;\n                        blockList_3.push(blockID);\n                        return [4\n                        /*yield*/\n                        , this.stageBlock(blockID, function () {\n                          return streamFactory(start, contentLength);\n                        }, contentLength, {\n                          abortSignal: options.abortSignal,\n                          conditions: options.conditions,\n                          encryptionScope: options.encryptionScope,\n                          tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                            spanOptions: spanOptions\n                          })\n                        })];\n\n                      case 1:\n                        _a.sent(); // Update progress after block is successfully uploaded to server, in case of block trying\n\n\n                        transferProgress_4 += contentLength;\n\n                        if (options.onProgress) {\n                          options.onProgress({\n                            loadedBytes: transferProgress_4\n                          });\n                        }\n\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              });\n            };\n\n            for (i = 0; i < numBlocks_2; i++) {\n              _loop_3(i);\n            }\n\n            return [4\n            /*yield*/\n            , batch[\"do\"]()];\n\n          case 4:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.commitBlockList(blockList_3, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 5:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 6:\n            e_27 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_27.message\n            });\n            throw e_27;\n\n          case 7:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return BlockBlobClient;\n}(BlobClient);\n\nexport { BlockBlobClient };\n/**\n * PageBlobClient defines a set of operations applicable to page blobs.\n *\n * @export\n * @class PageBlobClient\n * @extends {BlobClient}\n */\n\nvar PageBlobClient =\n/** @class */\nfunction (_super) {\n  __extends(PageBlobClient, _super);\n\n  function PageBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {\n    var _this = this; // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n    //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n\n\n    var pipeline;\n    var url;\n    options = options || {};\n\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      options = blobNameOrOptions;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== \"string\") {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === \"string\" && blobNameOrOptions && typeof blobNameOrOptions === \"string\") {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      var containerName = credentialOrPipelineOrContainerName;\n      var blobName = blobNameOrOptions;\n      var extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n          url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n    }\n\n    _this = _super.call(this, url, pipeline) || this;\n    _this.pageBlobContext = new PageBlob(_this.storageClientContext);\n    return _this;\n  }\n  /**\n   * Creates a new PageBlobClient object identical to the source but with the\n   * specified snapshot timestamp.\n   * Provide \"\" will remove the snapshot and return a Client to the base blob.\n   *\n   * @param {string} snapshot The snapshot timestamp.\n   * @returns {PageBlobClient} A new PageBlobClient object identical to the source but with the specified snapshot timestamp.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.withSnapshot = function (snapshot) {\n    return new PageBlobClient(setURLParameter(this.url, URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n  };\n  /**\n   * Creates a page blob of the specified length. Call uploadPages to upload data\n   * data to a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {number} size size of the page blob.\n   * @param {PageBlobCreateOptions} [options] Options to the Page Blob Create operation.\n   * @returns {Promise<PageBlobCreateResponse>} Response data for the Page Blob Create operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.create = function (size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_28;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"PageBlobClient-create\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.pageBlobContext.create(0, size, {\n              abortSignal: options.abortSignal,\n              blobHTTPHeaders: options.blobHTTPHeaders,\n              blobSequenceNumber: options.blobSequenceNumber,\n              leaseAccessConditions: options.conditions,\n              metadata: options.metadata,\n              modifiedAccessConditions: options.conditions,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              tier: toAccessTier(options.tier),\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_28 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_28.message\n            });\n            throw e_28;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param {HttpRequestBody} body Data to upload\n   * @param {number} offset Offset of destination page blob\n   * @param {number} count Content length of the body, also number of bytes to be uploaded\n   * @param {PageBlobUploadPagesOptions} [options] Options to the Page Blob Upload Pages operation.\n   * @returns {Promise<PageBlobsUploadPagesResponse>} Response data for the Page Blob Upload Pages operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.uploadPages = function (body, offset, count, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_29;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"PageBlobClient-uploadPages\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.pageBlobContext.uploadPages(body, count, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              onUploadProgress: options.onProgress,\n              range: rangeToString({\n                offset: offset,\n                count: count\n              }),\n              sequenceNumberAccessConditions: options.conditions,\n              transactionalContentMD5: options.transactionalContentMD5,\n              transactionalContentCrc64: options.transactionalContentCrc64,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_29 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_29.message\n            });\n            throw e_29;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * The Upload Pages operation writes a range of pages to a page blob where the\n   * contents are read from a URL.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url\n   *\n   * @param {string} sourceURL Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication\n   * @param {number} sourceOffset The source offset to copy from. Pass 0 to copy from the beginning of source page blob\n   * @param {number} destOffset Offset of destination page blob\n   * @param {number} count Number of bytes to be uploaded from source page blob\n   * @param {PageBlobUploadPagesFromURLOptions} [options={}]\n   * @returns {Promise<PageBlobUploadPagesFromURLResponse>}\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.uploadPagesFromURL = function (sourceURL, sourceOffset, destOffset, count, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_30;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            _a = createSpan(\"PageBlobClient-uploadPagesFromURL\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            ensureCpkIfSpecified(options.customerProvidedKey, this.isHttps);\n            return [4\n            /*yield*/\n            , this.pageBlobContext.uploadPagesFromURL(sourceURL, rangeToString({\n              offset: sourceOffset,\n              count: count\n            }), 0, rangeToString({\n              offset: destOffset,\n              count: count\n            }), {\n              abortSignal: options.abortSignal,\n              sourceContentMD5: options.sourceContentMD5,\n              sourceContentCrc64: options.sourceContentCrc64,\n              leaseAccessConditions: options.conditions,\n              sequenceNumberAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              sourceModifiedAccessConditions: {\n                sourceIfMatch: options.sourceConditions.ifMatch,\n                sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince\n              },\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_30 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_30.message\n            });\n            throw e_30;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Frees the specified pages from the page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n   *\n   * @param {number} [offset] Starting byte position of the pages to clear.\n   * @param {number} [count] Number of bytes to clear.\n   * @param {PageBlobClearPagesOptions} [options] Options to the Page Blob Clear Pages operation.\n   * @returns {Promise<PageBlobClearPagesResponse>} Response data for the Page Blob Clear Pages operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.clearPages = function (offset, count, options) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_31;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"PageBlobClient-clearPages\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.clearPages(0, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              range: rangeToString({\n                offset: offset,\n                count: count\n              }),\n              sequenceNumberAccessConditions: options.conditions,\n              cpkInfo: options.customerProvidedKey,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_31 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_31.message\n            });\n            throw e_31;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the list of valid page ranges for a page blob or snapshot of a page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {number} [offset] Starting byte position of the page ranges.\n   * @param {number} [count] Number of bytes to get.\n   * @param {PageBlobGetPageRangesOptions} [options] Options to the Page Blob Get Ranges operation.\n   * @returns {Promise<PageBlobGetPageRangesResponse>} Response data for the Page Blob Get Ranges operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.getPageRanges = function (offset, count, options) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_32;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"PageBlobClient-getPageRanges\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.getPageRanges({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              range: rangeToString({\n                offset: offset,\n                count: count\n              }),\n              spanOptions: spanOptions\n            }).then(rangeResponseFromModel)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_32 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_32.message\n            });\n            throw e_32;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the collection of page ranges that differ between a specified snapshot and this page blob.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {number} offset Starting byte position of the page blob\n   * @param {number} count Number of bytes to get ranges diff.\n   * @param {string} prevSnapshot Timestamp of snapshot to retrive the difference.\n   * @param {PageBlobGetPageRangesDiffOptions} [options] Options to the Page Blob Get Page Ranges Diff operation.\n   * @returns {Promise<PageBlobGetPageRangesDiffResponse>} Response data for the Page Blob Get Page Range Diff operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.getPageRangesDiff = function (offset, count, prevSnapshot, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_33;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"PageBlobClient-getPageRangesDiff\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.getPageRangesDiff({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              prevsnapshot: prevSnapshot,\n              range: rangeToString({\n                offset: offset,\n                count: count\n              }),\n              spanOptions: spanOptions\n            }).then(rangeResponseFromModel)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_33 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_33.message\n            });\n            throw e_33;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.\n   * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n   *\n   * @param {number} offset Starting byte position of the page blob\n   * @param {number} count Number of bytes to get ranges diff.\n   * @param {string} prevSnapshotUrl URL of snapshot to retrive the difference.\n   * @param {PageBlobGetPageRangesDiffOptions} [options] Options to the Page Blob Get Page Ranges Diff operation.\n   * @returns {Promise<PageBlobGetPageRangesDiffResponse>} Response data for the Page Blob Get Page Range Diff operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.getPageRangesDiffForManagedDisks = function (offset, count, prevSnapshotUrl, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_34;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"PageBlobClient-GetPageRangesDiffForManagedDisks\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.getPageRangesDiff({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              prevSnapshotUrl: prevSnapshotUrl,\n              range: rangeToString({\n                offset: offset,\n                count: count\n              }),\n              spanOptions: spanOptions\n            }).then(rangeResponseFromModel)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_34 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_34.message\n            });\n            throw e_34;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Resizes the page blob to the specified size (which must be a multiple of 512).\n   * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties\n   *\n   * @param {number} size Target size\n   * @param {PageBlobResizeOptions} [options] Options to the Page Blob Resize operation.\n   * @returns {Promise<PageBlobResizeResponse>} Response data for the Page Blob Resize operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.resize = function (size, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_35;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"PageBlobClient-resize\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.resize(size, {\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              encryptionScope: options.encryptionScope,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_35 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_35.message\n            });\n            throw e_35;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets a page blob's sequence number.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param {SequenceNumberActionType} sequenceNumberAction Indicates how the service should modify the blob's sequence number.\n   * @param {number} [sequenceNumber] Required if sequenceNumberAction is max or update\n   * @param {PageBlobUpdateSequenceNumberOptions} [options] Options to the Page Blob Update Sequence Number operation.\n   * @returns {Promise<PageBlobUpdateSequenceNumberResponse>} Response data for the Page Blob Update Sequence Number operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.updateSequenceNumber = function (sequenceNumberAction, sequenceNumber, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_36;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"PageBlobClient-updateSequenceNumber\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {\n              abortSignal: options.abortSignal,\n              blobSequenceNumber: sequenceNumber,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_36 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_36.message\n            });\n            throw e_36;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.\n   * The snapshot is copied such that only the differential changes between the previously\n   * copied snapshot are transferred to the destination.\n   * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.\n   * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n   * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots\n   *\n   * @param {string} copySource Specifies the name of the source page blob snapshot. For example,\n   *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n   * @param {PageBlobStartCopyIncrementalOptions} [options] Options to the Page Blob Copy Incremental operation.\n   * @returns {Promise<PageBlobCopyIncrementalResponse>} Response data for the Page Blob Copy Incremental operation.\n   * @memberof PageBlobClient\n   */\n\n\n  PageBlobClient.prototype.startCopyIncremental = function (copySource, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_37;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"PageBlobClient-startCopyIncremental\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.pageBlobContext.copyIncremental(copySource, {\n              abortSignal: options.abortSignal,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_37 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_37.message\n            });\n            throw e_37;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return PageBlobClient;\n}(BlobClient);\n\nexport { PageBlobClient };\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n *\n * @export\n * @class BlobLeaseClient\n */\n\nvar BlobLeaseClient =\n/** @class */\nfunction () {\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param {(ContainerClient | BlobClient)} client The client to make the lease operation requests.\n   * @param {string} leaseId Initial proposed lease id.\n   * @memberof BlobLeaseClient\n   */\n  function BlobLeaseClient(client, leaseId) {\n    var clientContext = new StorageClientContext(client.url, client.pipeline.toServiceClientOptions());\n    this._url = client.url;\n\n    if (client instanceof ContainerClient) {\n      this._containerOrBlobOperation = new Container(clientContext);\n    } else {\n      this._containerOrBlobOperation = new StorageBlob(clientContext);\n    }\n\n    if (!leaseId) {\n      leaseId = generateUuid();\n    }\n\n    this._leaseId = leaseId;\n  }\n\n  Object.defineProperty(BlobLeaseClient.prototype, \"leaseId\", {\n    /**\n     * Gets the lease Id.\n     *\n     * @readonly\n     * @memberof BlobLeaseClient\n     * @type {string}\n     */\n    get: function get() {\n      return this._leaseId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BlobLeaseClient.prototype, \"url\", {\n    /**\n     * Gets the url.\n     *\n     * @readonly\n     * @memberof BlobLeaseClient\n     * @type {string}\n     */\n    get: function get() {\n      return this._url;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Establishes and manages a lock on a container for delete operations, or on a blob\n   * for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {number} duration Must be between 15 to 60 seconds, or infinite (-1)\n   * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for acquire lease operation.\n   * @memberof BlobLeaseClient\n   */\n\n  BlobLeaseClient.prototype.acquireLease = function (duration, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_38;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobLeaseClient-acquireLease\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this._containerOrBlobOperation.acquireLease({\n              abortSignal: options.abortSignal,\n              duration: duration,\n              modifiedAccessConditions: options.conditions,\n              proposedLeaseId: this._leaseId,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_38 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_38.message\n            });\n            throw e_38;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * To change the ID of the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {string} proposedLeaseId the proposed new lease Id.\n   * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for change lease operation.\n   * @memberof BlobLeaseClient\n   */\n\n\n  BlobLeaseClient.prototype.changeLease = function (proposedLeaseId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, response, e_39;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobLeaseClient-changeLease\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, {\n              abortSignal: options.abortSignal,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            response = _b.sent();\n            this._leaseId = proposedLeaseId;\n            return [2\n            /*return*/\n            , response];\n\n          case 3:\n            e_39 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_39.message\n            });\n            throw e_39;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container or the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for release lease operation.\n   * @memberof BlobLeaseClient\n   */\n\n\n  BlobLeaseClient.prototype.releaseLease = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_40;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobLeaseClient-releaseLease\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this._containerOrBlobOperation.releaseLease(this._leaseId, {\n              abortSignal: options.abortSignal,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_40 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_40.message\n            });\n            throw e_40;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * To renew the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param {LeaseOperationOptions} [options={}] Optional option to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for renew lease operation.\n   * @memberof BlobLeaseClient\n   */\n\n\n  BlobLeaseClient.prototype.renewLease = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_41;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobLeaseClient-renewLease\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this._containerOrBlobOperation.renewLease(this._leaseId, {\n              abortSignal: options.abortSignal,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_41 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_41.message\n            });\n            throw e_41;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @static\n   * @param {number} breakPeriod Break period\n   * @param {LeaseOperationOptions} [options={}] Optional options to configure lease management operations.\n   * @returns {Promise<LeaseOperationResponse>} Response data for break lease operation.\n   * @memberof BlobLeaseClient\n   */\n\n\n  BlobLeaseClient.prototype.breakLease = function (breakPeriod, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, operationOptions, e_42;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"BlobLeaseClient-breakLease\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            operationOptions = {\n              abortSignal: options.abortSignal,\n              breakPeriod: breakPeriod,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            };\n            return [4\n            /*yield*/\n            , this._containerOrBlobOperation.breakLease(operationOptions)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_42 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_42.message\n            });\n            throw e_42;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return BlobLeaseClient;\n}();\n\nexport { BlobLeaseClient };\n/**\n * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.\n *\n * @export\n * @class ContainerClient\n */\n\nvar ContainerClient =\n/** @class */\nfunction (_super) {\n  __extends(ContainerClient, _super);\n\n  function ContainerClient(urlOrConnectionString, credentialOrPipelineOrContainerName, options) {\n    var _this = this;\n\n    var pipeline;\n    var url;\n    options = options || {};\n\n    if (credentialOrPipelineOrContainerName instanceof Pipeline) {\n      // (url: string, pipeline: Pipeline)\n      url = urlOrConnectionString;\n      pipeline = credentialOrPipelineOrContainerName;\n    } else if (isNode && credentialOrPipelineOrContainerName instanceof StorageSharedKeyCredential || credentialOrPipelineOrContainerName instanceof AnonymousCredential || isTokenCredential(credentialOrPipelineOrContainerName)) {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      url = urlOrConnectionString;\n      pipeline = newPipeline(credentialOrPipelineOrContainerName, options);\n    } else if (!credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName !== \"string\") {\n      // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n      // The second parameter is undefined. Use anonymous credential.\n      url = urlOrConnectionString;\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else if (credentialOrPipelineOrContainerName && typeof credentialOrPipelineOrContainerName === \"string\") {\n      // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n      var containerName = credentialOrPipelineOrContainerName;\n      var extractedCreds = extractConnectionStringParts(urlOrConnectionString);\n\n      if (extractedCreds.kind === \"AccountConnString\") {\n        if (isNode) {\n          var sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n          url = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName));\n          options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n          pipeline = newPipeline(sharedKeyCredential, options);\n        } else {\n          throw new Error(\"Account connection string is only supported in Node.js environment\");\n        }\n      } else if (extractedCreds.kind === \"SASConnString\") {\n        url = appendToURLPath(extractedCreds.url, encodeURIComponent(containerName)) + \"?\" + extractedCreds.accountSas;\n        pipeline = newPipeline(new AnonymousCredential(), options);\n      } else {\n        throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n      }\n    } else {\n      throw new Error(\"Expecting non-empty strings for containerName parameter\");\n    }\n\n    _this = _super.call(this, url, pipeline) || this;\n    _this._containerName = _this.getContainerNameFromUrl();\n    _this.containerContext = new Container(_this.storageClientContext);\n    return _this;\n  }\n\n  Object.defineProperty(ContainerClient.prototype, \"containerName\", {\n    /**\n     * The name of the container.\n     */\n    get: function get() {\n      return this._containerName;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Creates a new container under the specified account. If the container with\n   * the same name already exists, the operation fails.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param {ContainerCreateOptions} [options] Options to Container Create operation.\n   * @returns {Promise<ContainerCreateResponse>}\n   * @memberof ContainerClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n   * const createContainerResponse = await containerClient.create();\n   * console.log(\"Container was created successfully\", createContainerResponse.requestId);\n   * ```\n   */\n\n  ContainerClient.prototype.create = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_43;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-create\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.create(__assign(__assign({}, options), {\n              spanOptions: spanOptions\n            }))];\n\n          case 2:\n            // Spread operator in destructuring assignments,\n            // this will filter out unwanted properties from the response object into result object\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_43 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_43.message\n            });\n            throw e_43;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns true if the Azrue container resource represented by this client exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing container might be deleted by other clients or\n   * applications. Vice versa new containers with the same name might be added by other clients or\n   * applications after this function completes.\n   *\n   * @param {ContainerExistsOptions} [options={}]\n   * @returns {Promise<boolean>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.exists = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_44;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-exists\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.getProperties({\n              abortSignal: options.abortSignal,\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            })];\n\n          case 2:\n            _b.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 3:\n            e_44 = _b.sent();\n\n            if (e_44.statusCode === 404) {\n              span.setStatus({\n                code: CanonicalCode.NOT_FOUND,\n                message: \"Expected exception when checking container existence\"\n              });\n              return [2\n              /*return*/\n              , false];\n            }\n\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_44.message\n            });\n            throw e_44;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a {@link BlobClient}\n   *\n   * @param {string} blobName A blob name\n   * @returns {BlobClient} A new BlobClient object for the given blob name.\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getBlobClient = function (blobName) {\n    return new BlobClient(appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);\n  };\n  /**\n   * Creates an {@link AppendBlobClient}\n   *\n   * @param {string} blobName An append blob name\n   * @returns {AppendBlobClient}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getAppendBlobClient = function (blobName) {\n    return new AppendBlobClient(appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);\n  };\n  /**\n   * Creates a {@link BlockBlobClient}\n   *\n   * @param {string} blobName A block blob name\n   * @returns {BlockBlobClient}\n   * @memberof ContainerClient\n   *\n   * Example usage:\n   *\n   * ```js\n   * const content = \"Hello world!\";\n   *\n   * const blockBlobClient = containerClient.getBlockBlobClient(\"<blob name>\");\n   * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n   * ```\n   */\n\n\n  ContainerClient.prototype.getBlockBlobClient = function (blobName) {\n    return new BlockBlobClient(appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);\n  };\n  /**\n   * Creates a {@link PageBlobClient}\n   *\n   * @param {string} blobName A page blob name\n   * @returns {PageBlobClient}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getPageBlobClient = function (blobName) {\n    return new PageBlobClient(appendToURLPath(this.url, encodeURIComponent(blobName)), this.pipeline);\n  };\n  /**\n   * Returns all user-defined metadata and system properties for the specified\n   * container. The data returned does not include the container's list of blobs.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @param {ContainerGetPropertiesOptions} [options] Options to Container Get Properties operation.\n   * @returns {Promise<ContainerGetPropertiesResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getProperties = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_45;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            _a = createSpan(\"ContainerClient-getProperties\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.getProperties(__assign(__assign({\n              abortSignal: options.abortSignal\n            }, options.conditions), {\n              spanOptions: spanOptions\n            }))];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_45 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_45.message\n            });\n            throw e_45;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Marks the specified container for deletion. The container and any blobs\n   * contained within it are later deleted during garbage collection.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param {ContainerDeleteMethodOptions} [options] Options to Container Delete operation.\n   * @returns {Promise<ContainerDeleteResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype[\"delete\"] = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_46;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            if (options.conditions.ifMatch && options.conditions.ifMatch !== ETagNone || options.conditions.ifNoneMatch && options.conditions.ifNoneMatch !== ETagNone) {\n              throw new RangeError(\"the IfMatch and IfNoneMatch access conditions must have their default\\\n        values because they are ignored by the service\");\n            }\n\n            _a = createSpan(\"ContainerClient-delete\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.deleteMethod({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_46 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_46.message\n            });\n            throw e_46;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets one or more user-defined name-value pairs for the specified container.\n   *\n   * If no option provided, or no metadata defined in the parameter, the container\n   * metadata will be removed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n   *\n   * @param {Metadata} [metadata] Replace existing metadata with this value.\n   *                            If no value provided the existing metadata will be removed.\n   * @param {ContainerSetMetadataOptions} [options] Options to Container Set Metadata operation.\n   * @returns {Promise<ContainerSetMetadataResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.setMetadata = function (metadata, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_47;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            if (options.conditions.ifUnmodifiedSince || options.conditions.ifMatch && options.conditions.ifMatch !== ETagNone || options.conditions.ifNoneMatch && options.conditions.ifNoneMatch !== ETagNone) {\n              throw new RangeError(\"the IfUnmodifiedSince, IfMatch, and IfNoneMatch must have their default values\\\n        because they are ignored by the blob service\");\n            }\n\n            _a = createSpan(\"ContainerClient-setMetadata\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.setMetadata({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              metadata: metadata,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_47 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_47.message\n            });\n            throw e_47;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Gets the permissions for the specified container. The permissions indicate\n   * whether container data may be accessed publicly.\n   *\n   * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n   *\n   * @param {ContainerGetAccessPolicyOptions} [options] Options to Container Get Access Policy operation.\n   * @returns {Promise<ContainerGetAccessPolicyResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getAccessPolicy = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, response, res, _i, response_1, identifier, accessPolicy, e_48;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!options.conditions) {\n              options.conditions = {};\n            }\n\n            _a = createSpan(\"ContainerClient-getAccessPolicy\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.getAccessPolicy({\n              abortSignal: options.abortSignal,\n              leaseAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            response = _b.sent();\n            res = {\n              _response: response._response,\n              blobPublicAccess: response.blobPublicAccess,\n              date: response.date,\n              etag: response.etag,\n              errorCode: response.errorCode,\n              lastModified: response.lastModified,\n              requestId: response.requestId,\n              clientRequestId: response.clientRequestId,\n              signedIdentifiers: [],\n              version: response.version\n            };\n\n            for (_i = 0, response_1 = response; _i < response_1.length; _i++) {\n              identifier = response_1[_i];\n              accessPolicy = undefined;\n\n              if (identifier.accessPolicy) {\n                accessPolicy = {\n                  permissions: identifier.accessPolicy.permissions\n                };\n\n                if (identifier.accessPolicy.expiresOn) {\n                  accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);\n                }\n\n                if (identifier.accessPolicy.startsOn) {\n                  accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);\n                }\n              }\n\n              res.signedIdentifiers.push({\n                accessPolicy: accessPolicy,\n                id: identifier.id\n              });\n            }\n\n            return [2\n            /*return*/\n            , res];\n\n          case 3:\n            e_48 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_48.message\n            });\n            throw e_48;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Sets the permissions for the specified container. The permissions indicate\n   * whether blobs in a container may be accessed publicly.\n   *\n   * When you set permissions for a container, the existing permissions are replaced.\n   * If no access or containerAcl provided, the existing container ACL will be\n   * removed.\n   *\n   * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.\n   * During this interval, a shared access signature that is associated with the stored access policy will\n   * fail with status code 403 (Forbidden), until the access policy becomes active.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n   *\n   * @param {PublicAccessType} [access] The level of public access to data in the container.\n   * @param {SignedIdentifier[]} [containerAcl] Array of elements each having a unique Id and details of the access policy.\n   * @param {ContainerSetAccessPolicyOptions} [options] Options to Container Set Access Policy operation.\n   * @returns {Promise<ContainerSetAccessPolicyResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.setAccessPolicy = function (access, containerAcl, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, acl, _i, _b, identifier, e_49;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options.conditions = options.conditions || {};\n            _a = createSpan(\"ContainerClient-setAccessPolicy\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3, 4, 5]);\n\n            acl = [];\n\n            for (_i = 0, _b = containerAcl || []; _i < _b.length; _i++) {\n              identifier = _b[_i];\n              acl.push({\n                accessPolicy: {\n                  expiresOn: identifier.accessPolicy.expiresOn ? truncatedISO8061Date(identifier.accessPolicy.expiresOn) : \"\",\n                  permissions: identifier.accessPolicy.permissions,\n                  startsOn: identifier.accessPolicy.startsOn ? truncatedISO8061Date(identifier.accessPolicy.startsOn) : \"\"\n                },\n                id: identifier.id\n              });\n            }\n\n            return [4\n            /*yield*/\n            , this.containerContext.setAccessPolicy({\n              abortSignal: options.abortSignal,\n              access: access,\n              containerAcl: acl,\n              leaseAccessConditions: options.conditions,\n              modifiedAccessConditions: options.conditions,\n              spanOptions: spanOptions\n            })];\n\n          case 2:\n            return [2\n            /*return*/\n            , _c.sent()];\n\n          case 3:\n            e_49 = _c.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_49.message\n            });\n            throw e_49;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Get a {@link BlobLeaseClient} that manages leases on the container.\n   *\n   * @param {string} [proposeLeaseId] Initial proposed lease Id.\n   * @returns {BlobLeaseClient} A new BlobLeaseClient object for managing leases on the container.\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.getBlobLeaseClient = function (proposeLeaseId) {\n    return new BlobLeaseClient(this, proposeLeaseId);\n  };\n  /**\n   * Creates a new block blob, or updates the content of an existing block blob.\n   *\n   * Updating an existing block blob overwrites any existing metadata on the blob.\n   * Partial updates are not supported; the content of the existing blob is\n   * overwritten with the new content. To perform a partial update of a block blob's,\n   * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.\n   *\n   * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},\n   * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better\n   * performance with concurrency uploading.\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n   *\n   * @param {string} blobName Name of the block blob to create or update.\n   * @param {HttpRequestBody} body Blob, string, ArrayBuffer, ArrayBufferView or a function\n   *                               which returns a new Readable stream whose offset is from data source beginning.\n   * @param {number} contentLength Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n   *                               string including non non-Base64/Hex-encoded characters.\n   * @param {BlockBlobUploadOptions} [options] Options to configure the Block Blob Upload operation.\n   * @returns {Promise<{ blockBlobClient: BlockBlobClient; response: BlockBlobUploadResponse }>} Block Blob upload response data and the corresponding BlockBlobClient instance.\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.uploadBlockBlob = function (blobName, body, contentLength, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, blockBlobClient, response, e_50;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-uploadBlockBlob\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            blockBlobClient = this.getBlockBlobClient(blobName);\n            return [4\n            /*yield*/\n            , blockBlobClient.upload(body, contentLength, __assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            response = _b.sent();\n            return [2\n            /*return*/\n            , {\n              blockBlobClient: blockBlobClient,\n              response: response\n            }];\n\n          case 3:\n            e_50 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_50.message\n            });\n            throw e_50;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Marks the specified blob or snapshot for deletion. The blob is later deleted\n   * during garbage collection. Note that in order to delete a blob, you must delete\n   * all of its snapshots. You can delete both at the same time with the Delete\n   * Blob operation.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n   *\n   * @param {string} blobName\n   * @param {BlobDeleteOptions} [options] Options to Blob Delete operation.\n   * @returns {Promise<BlobDeleteResponse>} Block blob deletion response data.\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.deleteBlob = function (blobName, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, blobClient, e_51;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-deleteBlob\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            blobClient = this.getBlobClient(blobName);\n            return [4\n            /*yield*/\n            , blobClient[\"delete\"](__assign(__assign({}, options), {\n              tracingOptions: __assign(__assign({}, options.tracingOptions), {\n                spanOptions: spanOptions\n              })\n            }))];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_51 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_51.message\n            });\n            throw e_51;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * listBlobFlatSegment returns a single segment of blobs starting from the\n   * specified Marker. Use an empty Marker to start enumeration from the beginning.\n   * After getting a segment, process it, and then call listBlobsFlatSegment again\n   * (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param {string} [marker] A string value that identifies the portion of the list to be returned with the next list operation.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to Container List Blob Flat Segment operation.\n   * @returns {Promise<ContainerListBlobFlatSegmentResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listBlobFlatSegment = function (marker, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_52;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-listBlobFlatSegment\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.listBlobFlatSegment(__assign(__assign({\n              marker: marker\n            }, options), {\n              spanOptions: spanOptions\n            }))];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_52 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_52.message\n            });\n            throw e_52;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * listBlobHierarchySegment returns a single segment of blobs starting from\n   * the specified Marker. Use an empty Marker to start enumeration from the\n   * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment\n   * again (passing the the previously-returned Marker) to get the next segment.\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param {string} delimiter The charactor or string used to define the virtual hierarchy\n   * @param {string} [marker] A string value that identifies the portion of the list to be returned with the next list operation.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to Container List Blob Hierarchy Segment operation.\n   * @returns {Promise<ContainerListBlobHierarchySegmentResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listBlobHierarchySegment = function (delimiter, marker, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, span, spanOptions, e_53;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = createSpan(\"ContainerClient-listBlobHierarchySegment\", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3, 4, 5]);\n\n            return [4\n            /*yield*/\n            , this.containerContext.listBlobHierarchySegment(delimiter, __assign(__assign({\n              marker: marker\n            }, options), {\n              spanOptions: spanOptions\n            }))];\n\n          case 2:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 3:\n            e_53 = _b.sent();\n            span.setStatus({\n              code: CanonicalCode.UNKNOWN,\n              message: e_53.message\n            });\n            throw e_53;\n\n          case 4:\n            span.end();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse\n   *\n   * @private\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the ContinuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The ContinuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<ContainerListBlobFlatSegmentResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listSegments = function (marker, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __asyncGenerator(this, arguments, function listSegments_1() {\n      var listBlobsFlatSegmentResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(!!marker || marker === undefined)) return [3\n            /*break*/\n            , 7];\n            _a.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , __await(this.listBlobFlatSegment(marker, options))];\n\n          case 2:\n            listBlobsFlatSegmentResponse = _a.sent();\n            marker = listBlobsFlatSegmentResponse.continuationToken;\n            return [4\n            /*yield*/\n            , __await(listBlobsFlatSegmentResponse)];\n\n          case 3:\n            return [4\n            /*yield*/\n            , __await.apply(void 0, [_a.sent()])];\n\n          case 4:\n            return [4\n            /*yield*/\n            , _a.sent()];\n\n          case 5:\n            _a.sent();\n\n            _a.label = 6;\n\n          case 6:\n            if (marker) return [3\n            /*break*/\n            , 1];\n            _a.label = 7;\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an AsyncIterableIterator of {@link BlobItem} objects\n   *\n   * @private\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<BlobItem>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listItems = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __asyncGenerator(this, arguments, function listItems_1() {\n      var marker, _a, _b, listBlobsFlatSegmentResponse, e_54_1;\n\n      var e_54, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _d.trys.push([0, 7, 8, 13]);\n\n            _a = __asyncValues(this.listSegments(marker, options));\n            _d.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , __await(_a.next())];\n\n          case 2:\n            if (!(_b = _d.sent(), !_b.done)) return [3\n            /*break*/\n            , 6];\n            listBlobsFlatSegmentResponse = _b.value;\n            return [5\n            /*yield**/\n            , __values(__asyncDelegator(__asyncValues(listBlobsFlatSegmentResponse.segment.blobItems)))];\n\n          case 3:\n            return [4\n            /*yield*/\n            , __await.apply(void 0, [_d.sent()])];\n\n          case 4:\n            _d.sent();\n\n            _d.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 1];\n\n          case 6:\n            return [3\n            /*break*/\n            , 13];\n\n          case 7:\n            e_54_1 = _d.sent();\n            e_54 = {\n              error: e_54_1\n            };\n            return [3\n            /*break*/\n            , 13];\n\n          case 8:\n            _d.trys.push([8,, 11, 12]);\n\n            if (!(_b && !_b.done && (_c = _a[\"return\"]))) return [3\n            /*break*/\n            , 10];\n            return [4\n            /*yield*/\n            , __await(_c.call(_a))];\n\n          case 9:\n            _d.sent();\n\n            _d.label = 10;\n\n          case 10:\n            return [3\n            /*break*/\n            , 12];\n\n          case 11:\n            if (e_54) throw e_54.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 12:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 13:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an async iterable iterator to list all the blobs\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * // Get the containerClient before you run these snippets,\n   * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\");`\n   * let i = 1;\n   * for await (const blob of containerClient.listBlobsFlat()) {\n   *   console.log(`Blob ${i++}: ${blob.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * let iter = containerClient.listBlobsFlat();\n   * let blobItem = await iter.next();\n   * while (!blobItem.done) {\n   *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n   *   blobItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {\n   *   for (const blob of response.segment.blobItems) {\n   *     console.log(`Blob ${i++}: ${blob.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 blob names\n   * for (const blob of response.segment.blobItems) {\n   *   console.log(`Blob ${i++}: ${blob.name}`);\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   *\n   * // Passing next marker as continuationToken\n   *\n   * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 blob names\n   * for (const blob of response.segment.blobItems) {\n   *   console.log(`Blob ${i++}: ${blob.name}`);\n   * }\n   * ```\n   *\n   * @param {ContainerListBlobsOptions} [options={}] Options to list blobs.\n   * @returns {PagedAsyncIterableIterator<BlobItem, ContainerListBlobFlatSegmentResponse>} An asyncIterableIterator that supports paging.\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listBlobsFlat = function (options) {\n    var _a;\n\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var include = [];\n\n    if (options.includeCopy) {\n      include.push(\"copy\");\n    }\n\n    if (options.includeDeleted) {\n      include.push(\"deleted\");\n    }\n\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n\n    if (options.includeSnapshots) {\n      include.push(\"snapshots\");\n    }\n\n    if (options.includeUncommitedBlobs) {\n      include.push(\"uncommittedblobs\");\n    }\n\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    var updatedOptions = __assign(__assign({}, options), include.length > 0 ? {\n      include: include\n    } : {}); // AsyncIterableIterator to iterate over blobs\n\n\n    var iter = this.listItems(updatedOptions);\n    return _a = {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      next: function next() {\n        return iter.next();\n      }\n    },\n    /**\n     * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n     */\n    _a[Symbol.asyncIterator] = function () {\n      return this;\n    },\n    /**\n     * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n     */\n    _a.byPage = function (settings) {\n      if (settings === void 0) {\n        settings = {};\n      }\n\n      return _this.listSegments(settings.continuationToken, __assign({\n        maxPageSize: settings.maxPageSize\n      }, updatedOptions));\n    }, _a;\n  };\n  /**\n   * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse\n   *\n   * @private\n   * @param {string} delimiter The charactor or string used to define the virtual hierarchy\n   * @param {string} [marker] A string value that identifies the portion of\n   *                          the list of blobs to be returned with the next listing operation. The\n   *                          operation returns the ContinuationToken value within the response body if the\n   *                          listing operation did not return all blobs remaining to be listed\n   *                          with the current page. The ContinuationToken value can be used as the value for\n   *                          the marker parameter in a subsequent call to request the next page of list\n   *                          items. The marker value is opaque to the client.\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<ContainerListBlobHierarchySegmentResponse>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listHierarchySegments = function (delimiter, marker, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __asyncGenerator(this, arguments, function listHierarchySegments_1() {\n      var listBlobsHierarchySegmentResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(!!marker || marker === undefined)) return [3\n            /*break*/\n            , 7];\n            _a.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , __await(this.listBlobHierarchySegment(delimiter, marker, options))];\n\n          case 2:\n            listBlobsHierarchySegmentResponse = _a.sent();\n            marker = listBlobsHierarchySegmentResponse.continuationToken;\n            return [4\n            /*yield*/\n            , __await(listBlobsHierarchySegmentResponse)];\n\n          case 3:\n            return [4\n            /*yield*/\n            , __await.apply(void 0, [_a.sent()])];\n\n          case 4:\n            return [4\n            /*yield*/\n            , _a.sent()];\n\n          case 5:\n            _a.sent();\n\n            _a.label = 6;\n\n          case 6:\n            if (marker) return [3\n            /*break*/\n            , 1];\n            _a.label = 7;\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.\n   *\n   * @private\n   * @param {string} delimiter The charactor or string used to define the virtual hierarchy\n   * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.\n   * @returns {AsyncIterableIterator<{ kind: \"prefix\" } & BlobPrefix | { kind: \"blob\" } & BlobItem>}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listItemsByHierarchy = function (delimiter, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __asyncGenerator(this, arguments, function listItemsByHierarchy_1() {\n      var marker, _a, _b, listBlobsHierarchySegmentResponse, segment, _i, _c, prefix, _d, _e, blob, e_55_1;\n\n      var e_55, _f;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            _g.trys.push([0, 14, 15, 20]);\n\n            _a = __asyncValues(this.listHierarchySegments(delimiter, marker, options));\n            _g.label = 1;\n\n          case 1:\n            return [4\n            /*yield*/\n            , __await(_a.next())];\n\n          case 2:\n            if (!(_b = _g.sent(), !_b.done)) return [3\n            /*break*/\n            , 13];\n            listBlobsHierarchySegmentResponse = _b.value;\n            segment = listBlobsHierarchySegmentResponse.segment;\n            if (!segment.blobPrefixes) return [3\n            /*break*/\n            , 7];\n            _i = 0, _c = segment.blobPrefixes;\n            _g.label = 3;\n\n          case 3:\n            if (!(_i < _c.length)) return [3\n            /*break*/\n            , 7];\n            prefix = _c[_i];\n            return [4\n            /*yield*/\n            , __await(__assign({\n              kind: \"prefix\"\n            }, prefix))];\n\n          case 4:\n            return [4\n            /*yield*/\n            , _g.sent()];\n\n          case 5:\n            _g.sent();\n\n            _g.label = 6;\n\n          case 6:\n            _i++;\n            return [3\n            /*break*/\n            , 3];\n\n          case 7:\n            _d = 0, _e = segment.blobItems;\n            _g.label = 8;\n\n          case 8:\n            if (!(_d < _e.length)) return [3\n            /*break*/\n            , 12];\n            blob = _e[_d];\n            return [4\n            /*yield*/\n            , __await(__assign({\n              kind: \"blob\"\n            }, blob))];\n\n          case 9:\n            return [4\n            /*yield*/\n            , _g.sent()];\n\n          case 10:\n            _g.sent();\n\n            _g.label = 11;\n\n          case 11:\n            _d++;\n            return [3\n            /*break*/\n            , 8];\n\n          case 12:\n            return [3\n            /*break*/\n            , 1];\n\n          case 13:\n            return [3\n            /*break*/\n            , 20];\n\n          case 14:\n            e_55_1 = _g.sent();\n            e_55 = {\n              error: e_55_1\n            };\n            return [3\n            /*break*/\n            , 20];\n\n          case 15:\n            _g.trys.push([15,, 18, 19]);\n\n            if (!(_b && !_b.done && (_f = _a[\"return\"]))) return [3\n            /*break*/\n            , 17];\n            return [4\n            /*yield*/\n            , __await(_f.call(_a))];\n\n          case 16:\n            _g.sent();\n\n            _g.label = 17;\n\n          case 17:\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            if (e_55) throw e_55.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 19:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 20:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns an async iterable iterator to list all the blobs by hierarchy.\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * for await (const item of containerClient.listBlobsByHierarchy(\"/\")) {\n   *   if (item.kind === \"prefix\") {\n   *     console.log(`\\tBlobPrefix: ${item.name}`);\n   *   } else {\n   *     console.log(`\\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let iter = await containerClient.listBlobsByHierarchy(\"/\", { prefix: \"prefix1/\" });\n   * let entity = await iter.next();\n   * while (!entity.done) {\n   *   let item = entity.value;\n   *   if (item.kind === \"prefix\") {\n   *     console.log(`\\tBlobPrefix: ${item.name}`);\n   *   } else {\n   *     console.log(`\\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);\n   *   }\n   *   entity = await iter.next();\n   * }\n   * ```js\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * console.log(\"Listing blobs by hierarchy by page\");\n   * for await (const response of containerClient.listBlobsByHierarchy(\"/\").byPage()) {\n   *   const segment = response.segment;\n   *   if (segment.blobPrefixes) {\n   *     for (const prefix of segment.blobPrefixes) {\n   *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n   *     }\n   *   }\n   *   for (const blob of response.segment.blobItems) {\n   *     console.log(`\\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a max page size:\n   *\n   * ```js\n   * console.log(\"Listing blobs by hierarchy by page, specifying a prefix and a max page size\");\n   *\n   * let i = 1;\n   * for await (const response of containerClient.listBlobsByHierarchy(\"/\", { prefix: \"prefix2/sub1/\"}).byPage({ maxPageSize: 2 })) {\n   *   console.log(`Page ${i++}`);\n   *   const segment = response.segment;\n   *\n   *   if (segment.blobPrefixes) {\n   *     for (const prefix of segment.blobPrefixes) {\n   *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n   *     }\n   *   }\n   *\n   *   for (const blob of response.segment.blobItems) {\n   *     console.log(`\\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param {string} delimiter The charactor or string used to define the virtual hierarchy\n   * @param {ContainerListBlobsOptions} [options={}] Options to list blobs operation.\n   * @returns {(PagedAsyncIterableIterator<\n   *   { kind: \"prefix\" } & BlobPrefix | { kind: \"blob\" } & BlobItem,\n   *     ContainerListBlobHierarchySegmentResponse\n   *   >)}\n   * @memberof ContainerClient\n   */\n\n\n  ContainerClient.prototype.listBlobsByHierarchy = function (delimiter, options) {\n    var _a;\n\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var include = [];\n\n    if (options.includeCopy) {\n      include.push(\"copy\");\n    }\n\n    if (options.includeDeleted) {\n      include.push(\"deleted\");\n    }\n\n    if (options.includeMetadata) {\n      include.push(\"metadata\");\n    }\n\n    if (options.includeSnapshots) {\n      include.push(\"snapshots\");\n    }\n\n    if (options.includeUncommitedBlobs) {\n      include.push(\"uncommittedblobs\");\n    }\n\n    if (options.prefix === \"\") {\n      options.prefix = undefined;\n    }\n\n    var updatedOptions = __assign(__assign({}, options), include.length > 0 ? {\n      include: include\n    } : {}); // AsyncIterableIterator to iterate over blob prefixes and blobs\n\n\n    var iter = this.listItemsByHierarchy(delimiter, updatedOptions);\n    return _a = {\n      /**\n       * @member {Promise} [next] The next method, part of the iteration protocol\n       */\n      next: function next() {\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2\n            /*return*/\n            , iter.next()];\n          });\n        });\n      }\n    },\n    /**\n     * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol\n     */\n    _a[Symbol.asyncIterator] = function () {\n      return this;\n    },\n    /**\n     * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time\n     */\n    _a.byPage = function (settings) {\n      if (settings === void 0) {\n        settings = {};\n      }\n\n      return _this.listHierarchySegments(delimiter, settings.continuationToken, __assign({\n        maxPageSize: settings.maxPageSize\n      }, updatedOptions));\n    }, _a;\n  };\n\n  ContainerClient.prototype.getContainerNameFromUrl = function () {\n    var containerName;\n\n    try {\n      //  URL may look like the following\n      // \"https://myaccount.blob.core.windows.net/mycontainer?sasString\";\n      // \"https://myaccount.blob.core.windows.net/mycontainer\";\n      // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`\n      // http://localhost:10001/devstoreaccount1/containername\n      var parsedUrl = URLBuilder.parse(this.url);\n\n      if (parsedUrl.getHost().split(\".\")[1] === \"blob\") {\n        // \"https://myaccount.blob.core.windows.net/containername\".\n        // .getPath() -> /containername\n        containerName = parsedUrl.getPath().split(\"/\")[1];\n      } else {\n        // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername\n        // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername\n        // .getPath() -> /devstoreaccount1/containername\n        containerName = parsedUrl.getPath().split(\"/\")[2];\n      } // decode the encoded containerName - to get all the special characters that might be present in it\n\n\n      containerName = decodeURIComponent(containerName);\n\n      if (!containerName) {\n        throw new Error(\"Provided containerName is invalid.\");\n      }\n\n      return containerName;\n    } catch (error) {\n      throw new Error(\"Unable to extract containerName with provided information.\");\n    }\n  };\n\n  return ContainerClient;\n}(StorageClient);\n\nexport { ContainerClient };"],"sourceRoot":""}